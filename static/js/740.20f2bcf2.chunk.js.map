{"version":3,"file":"static/js/740.20f2bcf2.chunk.js","mappings":"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","sources":["../../../../packages/miq-socialjs/src/HashtagRoutes.tsx","../../../../packages/miq-socialjs/src/models.ts"],"sourcesContent":["import React from 'react';\nimport { Link, Route, Routes, useParams } from 'react-router-dom';\n\nimport { useRequest } from '@miq/hookjs';\nimport Staff from '@miq/staffjs';\n\nimport Form, { FormFieldProps, useForm } from '@miq/formjs';\nimport { Response } from '@miq/utiljs';\nimport { Hashtag, HashtagType } from './models';\n\nexport default function HashtagRoutes() {\n  const { res, setRes } = useRequest(() => Hashtag().list());\n\n  const r = new Response(res);\n  if (!r.isSuccess) return null;\n\n  return (\n    <Staff.View\n      title=\"Hashtags\"\n      actions={\n        <Link to=\"new/\" className=\"btn btn-primary-3\">\n          Add hashtag\n        </Link>\n      }\n    >\n      <div className=\"d-grid grid-md-11\">\n        <div className=\"span-md-5\">\n          {r.items.map((item: HashtagType) => {\n            const instance = Hashtag(item);\n            return (\n              <Link to={`${item.slug}/`} key={item.slug}>\n                <div className=\"mb-3\">{instance.name}</div>\n              </Link>\n            );\n          })}\n        </div>\n\n        <div className=\"span-md-6\">\n          <Routes>\n            <Route\n              path=\"new/\"\n              element={\n                <Staff.View title=\"Add a new hashtag\">\n                  <HashtagCreateForm\n                    onSuccess={(newRes: any) => {\n                      // @ts-ignore\n                      setRes({ ...res, data: { ...res.data, results: [newRes.data, ...res.data.results] } });\n                    }}\n                  />\n                </Staff.View>\n              }\n            />\n            <Route path=\":tagSlug/\" element={<HashtagUpdateForm />} />\n          </Routes>\n        </div>\n      </div>\n    </Staff.View>\n  );\n}\n\nconst HashtagUpdateForm = (props: any) => {\n  const { tagSlug } = useParams();\n\n  const form = useForm({ name: '' });\n  const { res } = useRequest(() => Hashtag({ slug: tagSlug }).retrieve(), {\n    refreshDeps: [tagSlug],\n    onSuccess: (res) => form.setValues({ name: res.data.name }),\n  });\n\n  const r = new Response(res);\n  if (!r.isSuccess) return null;\n\n  const instance = Hashtag(r.data);\n\n  return (\n    <Form\n      context={form}\n      onSubmit={(e) => {\n        e.preventDefault();\n        const { onSuccess, onError } = props;\n        instance\n          .patch(form.values, { name: instance.name })\n          .then((res: any) => onSuccess?.(res))\n          .catch((err: any) => onError?.(err));\n      }}\n    >\n      <div className=\"d-flex align-items-center\">\n        <div className=\"flex-1 me-1\">\n          <HashtagNameField {...{ form }} label=\"\" />\n        </div>\n        <Form.Submit value=\"Update\" className=\"btn-primary-3 btn-md\" />\n      </div>\n    </Form>\n  );\n};\n\nconst HashtagCreateForm = (props: any) => {\n  const { onSuccess, onError } = props;\n  const form = useForm({ name: '' });\n\n  return (\n    <Form\n      context={form}\n      onSubmit={(e) => {\n        e.preventDefault();\n        Hashtag()\n          .create(form.values)\n          .then((res: any) => onSuccess?.(res))\n          .catch((err: any) => onError?.(err));\n      }}\n    >\n      <HashtagNameField {...{ form }} />\n      <Form.Submit value=\"Save hashtag\" className=\"btn-primary-3 btn-md\" />\n    </Form>\n  );\n};\n\nconst HashtagNameField = (props: FormFieldProps & { form: any }) => {\n  const { form, label = 'Name' } = props;\n  return (\n    <Form.Field label={label} error={form.errors.name}>\n      <Form.Text required name=\"name\" maxLength={99} />\n    </Form.Field>\n  );\n};\n","import { StaffModel } from '@miq/staffjs';\n\nexport type CaptionType = {\n  slug?: string;\n  text?: string;\n  template?: string;\n  use_count?: number;\n  score?: number;\n};\n\nexport const Caption = (data: CaptionType) => StaffModel<CaptionType>(data, 'social-post-texts');\n\nexport type HashtagType = {\n  slug?: string;\n  name?: string;\n};\n\nexport const Hashtag = (data: HashtagType) => StaffModel<HashtagType>(data, 'social-hashtags');\n"],"names":["HashtagRoutes","useRequest","Hashtag","list","res","setRes","r","Response","isSuccess","title","actions","to","className","items","map","item","instance","slug","name","path","element","HashtagCreateForm","onSuccess","newRes","data","results","HashtagUpdateForm","props","tagSlug","useParams","form","useForm","retrieve","refreshDeps","setValues","context","onSubmit","e","preventDefault","onError","patch","values","then","catch","err","HashtagNameField","label","value","create","error","errors","required","maxLength","Caption","StaffModel"],"sourceRoot":""}