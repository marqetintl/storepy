{"version":3,"sources":["../../../../packages/miq-sharedjs/src/editor/src/Section/section-renderers.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/MarkdownSection/index.jsx"],"names":["marked","setOptions","renderer","Renderer","highlight","code","lang","hljs","require","language","getLanguage","value","pedantic","gfm","breaks","sanitize","smartLists","smartypants","xhtml","render","data","type","isRequired","text","MdSectionEdit","props","className","TextAreaX","autoFocus","clearFocus","name","placeholder","MdSectionPreview","context","isEdit","dangerouslySetInnerHTML","__html","html","MarkdownSection","forwardRef","ref","form","useForm","update","id","getClassName","Icon","Icons","Markdown","label","onSave","slug","values","then","res","setEdit","IS_DEV","displayName"],"mappings":"wPAKAA,IAAOC,WAAW,CACdC,SAAU,IAAIF,IAAOG,SACrBC,UAAW,SAAUC,EAAMC,GACvB,IAAMC,EAAOC,EAAQ,KACfC,EAAWF,EAAKG,YAAYJ,GAAQA,EAAO,YAEjD,OAAOC,EAAKH,UAAUC,EAAM,CAAEI,aAAYE,OAE9CC,UAAU,EACVC,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,OAAO,IAKI,SAASC,EAAOC,GAC3B,MAA8CA,EAAtCC,KAER,YAFA,MAAeC,YAAW,gBAA1B,GAGI,IAAK,KACD,OAAOtB,IAAOoB,EAAKG,MAEvB,QACI,MAAM,QAAN,OAAeH,EAAKG,KAApB,W,WChBNC,EAAgB,SAACC,GACnB,OACI,qBAAKC,UAAU,GAAf,SACI,cAAC,IAAKC,UAAN,CAAgBC,WAAS,EAACC,YAAU,EAACC,KAAK,OAAOC,YAAY,kCAKnEC,EAAmB,SAACP,GACtB,OAAIA,EAAMQ,QAAQC,OAAe,cAAC,EAAD,eAAmBT,IAGhD,qBAAKC,UAAU,GAAf,SACI,qBAAKS,wBAAyB,CAAEC,OAAQX,EAAML,KAAKiB,MAAQ,2BAKjEC,EAAkBC,sBAAW,SAACd,EAAOe,GACvC,IAAMC,EAAOC,YAAQ,CAAEnB,KAAME,EAAML,KAAKG,MAAQ,KACxCH,EAASK,EAATL,KACFuB,EAASlB,EAAMQ,QAAQU,OAgB7B,OACI,cAAC,IAAD,CAAchC,MAAO8B,EAArB,SACI,sBAAKG,GAAInB,EAAMmB,GAAUJ,MAAOd,UAAWmB,YAAa,CAACpB,EAAMC,UAAW,eAA1E,UACI,cAAC,IAAD,CAAeoB,KAAMC,IAAMC,WAE3B,cAAC,IAAD,UACI,cAAC,EAAD,eAAsBvB,MAG1B,cAAC,IAAD,UACI,sBAAKC,UAAU,UAAf,UACI,cAAC,IAAD,2BAAyBD,GAAzB,IAAgCwB,MAAM,YAEtC,qBAAKvB,UAAU,kBAAf,SACI,cAAC,IAAD,CACIO,QAASR,EAAMQ,QACfQ,KAAMA,EACNrB,KAAMK,EAAML,KACZ8B,OAhCT,WACf,GAAK9B,EAAL,CAEA,IAAQC,EAASD,EAATC,KAERsB,EACIlB,EAAML,KAAK+B,KACX,CAAE9B,OAAME,KAAMkB,EAAKW,OAAO7B,KAAMc,KAAMlB,EAAO,2BAAKsB,EAAKW,QAAX,IAAmB/B,WAC/D,CAAEA,OAAME,KAAMH,EAAKG,OACrB8B,MAAK,SAACC,GACJ7B,EAAMQ,QAAQsB,SAAQ,yBAgC9BC,MACAlB,EAAgBmB,YAAc,mBAGnBnB","file":"static/js/6.a2cc8cf7.chunk.js","sourcesContent":["import ReactDOMServer from \"react-dom/server\";\nimport marked from \"marked\";\n\nimport { isRequired } from \"@miq/utils\";\n\nmarked.setOptions({\n    renderer: new marked.Renderer(),\n    highlight: function (code, lang) {\n        const hljs = require(\"highlight.js\");\n        const language = hljs.getLanguage(lang) ? lang : \"plaintext\";\n\n        return hljs.highlight(code, { language }).value;\n    },\n    pedantic: false,\n    gfm: true,\n    breaks: false,\n    sanitize: false,\n    smartLists: true,\n    smartypants: false,\n    xhtml: false,\n});\n\nexport const componentToHtml = (Component) => ReactDOMServer.renderToStaticMarkup(Component);\n\nexport default function render(data) {\n    const { type = isRequired(\"section type\") } = data;\n\n    switch (type) {\n        case \"MD\":\n            return marked(data.text);\n\n        default:\n            return `<div>${data.text}</div>`;\n    }\n}\n\n/**\n * UI\n */\n","import { getClassName, IS_DEV } from \"@miq/utils\";\nimport { forwardRef } from \"react\";\n\nimport \"highlight.js/styles/atelier-cave-dark.css\";\nimport \"./md-section.scss\";\n\nimport { Icons } from \"@miq/components\";\nimport Form, { FormProvider, useForm } from \"@miq/form\";\nimport { SectionFooter, SectionHeader, SectionBody } from \"../section-ui\";\nimport { SectionDeleteButton, SectionEditButton } from \"../section-components\";\nimport render from \"../section-renderers\";\n\n/**\n * MARKDOWN SECTION\n */\n\nconst MdSectionEdit = (props) => {\n    return (\n        <div className=\"\">\n            <Form.TextAreaX autoFocus clearFocus name=\"text\" placeholder=\"# Mardown is supported ...\" />\n        </div>\n    );\n};\n\nconst MdSectionPreview = (props) => {\n    if (props.context.isEdit) return <MdSectionEdit {...props} />;\n\n    return (\n        <div className=\"\">\n            <div dangerouslySetInnerHTML={{ __html: props.data.html || \"Nothing to preview\" }} />\n        </div>\n    );\n};\n\nconst MarkdownSection = forwardRef((props, ref) => {\n    const form = useForm({ text: props.data.text || \"\" });\n    const { data } = props;\n    const update = props.context.update;\n\n    const handleSave = () => {\n        if (!data) return;\n\n        const { type } = data;\n\n        update(\n            props.data.slug,\n            { type, text: form.values.text, html: render({ ...form.values, type }) },\n            { type, text: data.text }\n        ).then((res) => {\n            props.context.setEdit(false);\n        });\n    };\n\n    return (\n        <FormProvider value={form}>\n            <div id={props.id} {...{ ref }} className={getClassName([props.className, \"section-md\"])}>\n                <SectionHeader Icon={Icons.Markdown} />\n\n                <SectionBody>\n                    <MdSectionPreview {...props} />\n                </SectionBody>\n\n                <SectionFooter>\n                    <div className=\"actions\">\n                        <SectionDeleteButton {...props} label=\"Delete\" />\n\n                        <div className=\"actions-primary\">\n                            <SectionEditButton\n                                context={props.context}\n                                form={form}\n                                data={props.data}\n                                onSave={handleSave}\n                            />\n                        </div>\n                    </div>\n                </SectionFooter>\n            </div>\n        </FormProvider>\n    );\n});\n\nif (IS_DEV) {\n    MarkdownSection.displayName = \"MarkdownSection\";\n}\n\nexport default MarkdownSection;\n"],"sourceRoot":""}