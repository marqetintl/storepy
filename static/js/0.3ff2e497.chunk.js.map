{"version":3,"sources":["shop/product/components.jsx","exports.jsx","shop/orders/components.jsx","shop/product/forms.jsx","shop/product/Attribute.jsx","shop/product/UpdateView.jsx"],"names":["ProductImageAltTextInput","image","props","alt_text","form","useForm","imgSlug","slug","setValues","useEffect","value","className","required","onSuccess","onError","placeholder","StaffProductPublishButton","prodSlug","product","toast","page","is_published","onPublishSuccess","onUnpublishSuccess","id","onClick","productServices","unpublish","then","data","catch","err","error","message","SHOP_MSGS","default","publish","response","retail_price","category","publish_error_retail_price","handleError","publish_error_category","publish_error_page","getClassName","ProductImageUploadButton","multiple","onCreate","imgsArray","filter","img","patch","images","map","onCreateSuccess","onCreateError","SupplierData","supplier_name","supplier_item_id","supplier_item_category","supplier_item_cost","supplier_item_cost_currency","href","supplier_item_url","target","rel","isRequired","ProductNameInput","showLabel","label","input","rest","Label","TextInput","name","maxLength","ProductCategoryInput","categories","SelectInput","nullValue","items","cat","Option","key","ProductRetailPriceInput","type","min","step","ProductPresaleCheckboxInput","CheckboxInput","ProductPresaleTextInput","TextAreaX","ProductOnSaleCheckboxInput","ProductSalePriceInput","ProductForm","children","context","fields","onSubmit","e","preventDefault","fD","forEach","field","values","NameInput","DescField","text","Field","CategoryInput","RetailPriceInput","PresaleCheckboxInput","PresaleTextInput","OnSaleCheckboxInput","SalePriceInput","StageSelect","stages","stage","AttrNameInput","minLength","AttrValueInput","AttributeUpdateForm","instance","patchAttribute","style","alignItems","errors","Icon","Icons","Trash","render","args","deleteAttribute","setOpen","renderHeader","Submit","AttributeCreateForm","initValues","postAttribute","productFormDefaultValues","description","is_pre_sale","is_pre_sale_text","sale_price","is_on_sale","title","slug_public","ProductUpdateStaffView","match","params","useState","setProduct","tab","setTab","detail","console","log","status","prev_slug","next_slug","back","actions","SHOP_PATHS","productUpdate","ViewTabs","onDelete","history","push","Section"],"mappings":"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","file":"static/js/0.3ff2e497.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { productServices } from './utils';\nimport { useForm, FormProvider, ImgUploadButton, ImageAltTextInput, Button, getClassName } from 'src/exports';\n\n//#region ProductImageAltTextInput\nexport const ProductImageAltTextInput = ({ image, ...props }) => {\n  const alt_text = image?.alt_text || '';\n\n  const form = useForm({ alt_text });\n\n  const imgSlug = image?.slug;\n  const setValues = form.setValues;\n\n  useEffect(() => {\n    setValues({ alt_text });\n  }, [imgSlug, setValues, alt_text]);\n\n  if (!image || !image.slug) return null;\n\n  return (\n    <FormProvider value={form} className={props.className}>\n      <ImageAltTextInput\n        required\n        image={image}\n        onSuccess={props.onSuccess}\n        onError={props.onError}\n        placeholder=\"Add an alternative text ...\"\n      />\n    </FormProvider>\n  );\n};\n\nProductImageAltTextInput.propTypes = {\n  image: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n  }),\n\n  onUpdate: PropTypes.func,\n  onError: PropTypes.func,\n};\n//#endregion ProductImageAltTextInput\n\n//#region BUTTONS > >\n\n//#region StaffProductPublishButton\n\n/**\n * Button component for publishing a product\n * ```js\n * <StaffProductPublishButton\n *  product={product}\n *  prodSlug='slug'\n *  product={{slug: 'slug', page:{slug:'pageSlug'}}}\n *  onPublishSuccess={(data) => setProduct(data)}\n *  onUnpublishSuccess={(data) => setProduct(data)}\n *  onUnpublishSuccess={(err) => setError(err)}\n * />\n * ```\n * @param {Object} props\n * @param {string} props.prodSlug - slug of the product: required\n * @param {Object} props.product - product object\n * @param {Object} props.form - product form\n * @param {Function} props.onPublishSuccess publish success callback\n * @param {Function} props.onUnpublishSuccess unpublish success callback\n * @param {Function} props.onError\n * @param {Object} props.toast\n * @param {string} props.className\n * @param {string} props.id\n * @augments {Component<Props, State>}\n *\n */\n\nexport function StaffProductPublishButton(props) {\n  const { prodSlug, product, toast, ...rest } = props;\n  if (!prodSlug || !product?.page) return null;\n\n  const { is_published } = product.page;\n  const { form, onPublishSuccess, onUnpublishSuccess, onError } = props;\n\n  const handlePublish = () => {\n    if (is_published)\n      return productServices\n        .unpublish(prodSlug)\n        .then((data) => onUnpublishSuccess?.(data))\n        .catch((err) => {\n          return toast?.error({ message: SHOP_MSGS.default });\n        });\n\n    return productServices\n      .publish(prodSlug)\n      .then((data) => onPublishSuccess?.(data))\n      .catch((err) => {\n        const { response = {} } = err;\n\n        if (!response.data) {\n          toast?.error({ message: SHOP_MSGS.default });\n        }\n        const { retail_price, category, page } = response.data;\n\n        if (retail_price) {\n          toast?.error({ message: SHOP_MSGS.product.publish_error_retail_price });\n        }\n        if (category) {\n          if (form) form.handleError(err);\n          toast?.error({ message: SHOP_MSGS.product.publish_error_category });\n        }\n        if (page) {\n          toast?.error({ message: SHOP_MSGS.product.publish_error_page });\n        }\n        return onError?.(err);\n      });\n  };\n\n  return (\n    <Button\n      id={props.id}\n      onClick={handlePublish}\n      className={getClassName([\n        'staff-product-publish-button',\n        is_published ? 'btn-danger' : 'btn-primary',\n        props.className,\n      ])}\n    >\n      {is_published ? 'Unpublish' : 'Publish'} product\n    </Button>\n  );\n}\n\nStaffProductPublishButton.propTypes = {\n  /** product slug */\n  prodSlug: PropTypes.string.isRequired,\n  /** product data */\n  product: PropTypes.shape({ page: PropTypes.shape({ is_published: PropTypes.bool }).isRequired }).isRequired,\n  /** if props.form: calls form.handleError whenever applicable BEFORE calling props.onError */\n  form: PropTypes.object,\n  onPublishSuccess: PropTypes.func,\n  onUnpublishSuccess: PropTypes.func,\n  onError: PropTypes.func,\n};\n\n//#endregion\n\n//#region ProductImageUploadButton\n\n/**\n * Upload a product image\n * Usage:\n * ```js\n * <ProductImageUploadButton product={{prodData}} />\n * ```\n *\n * @param {Object} props\n * @param {Object} props.product\n * @param {bool} props.multiple\n * @param {Function} props.onCreate\n * @param {Function} props.onCreateSuccess\n * @param {Function} props.onCreateError\n * @augments {ImgUploadButton<Props, State>}\n */\n\nexport const ProductImageUploadButton = ({ product, ...props }) => {\n  if (!product || !product.slug) return null;\n\n  return (\n    <ImgUploadButton\n      multiple={true}\n      className=\"btn-primary-3\"\n      onCreate={(imgsArray) => {\n        imgsArray = imgsArray.filter((img) => img && img.slug);\n        return productServices\n          .patch(product.slug, { images: [...product.images, ...imgsArray.map((img) => img.slug)] })\n          .then((data) => {\n            if (props.onCreateSuccess) props.onCreateSuccess(data);\n          })\n          .catch((err) => {\n            if (props.onCreateError) props.onCreateError(err);\n          });\n      }}\n    />\n  );\n};\n//#endregion ProductImageButton\n\n//#region ProductCoverUploadButton\nexport const ProductCoverUploadButton = ({ children, product, ...props }) => {\n  if (!product || !product.slug) return null;\n\n  const handleCoverCreate = ({ slug }) => {\n    productServices\n      .patch(product.slug, { cover: slug })\n      .then((data) => {\n        if (props.onCreateSuccess) props.onCreateSuccess(data);\n      })\n      .catch((err) => {\n        if (props.onCreateError) props.onCreateError(err);\n      });\n  };\n  const handleCoverUpdate = (imgData) => {\n    if (props.onUpdateSuccess) props.onUpdateSuccess(imgData);\n  };\n\n  return (\n    <ImgUploadButton\n      slug={product.cover_data ? product.cover_data.slug : null}\n      onCreate={handleCoverCreate}\n      onUpdate={handleCoverUpdate}\n      className=\"product-cover-upload-button\"\n    >\n      {children}\n    </ImgUploadButton>\n  );\n};\nProductCoverUploadButton.propTypes = {\n  children: PropTypes.any.isRequired,\n  product: PropTypes.shape({ slug: PropTypes.string.isRequired }).isRequired,\n  onCreateSuccess: PropTypes.func,\n  onCreateError: PropTypes.func,\n  onUpdateSuccess: PropTypes.func,\n  onUpdateError: PropTypes.func,\n};\n//#endregion ProductCoverUploadButton\n\n//#endregion BUTTONS\n","export { ImageAltTextInput, PublishedStatusSpan } from '@miq/adminjs';\n\nexport { Button, ImgUploadButton, ImgSquare, Loading, Card } from '@miq/components';\n\nexport { getClassName } from '@miq/utils';\n\nexport { default as Form } from '@miq/form';\nexport { useForm, FormProvider } from '@miq/form';\n","export const SupplierData = ({ product, ...props }) => {\n  if (!product) return null;\n\n  return (\n    <div className=\"product-supplier-data\">\n      <ul>\n        <li>\n          <span className=\"\">Supplier</span>\n          <span className=\"\">{product.supplier_name}</span>\n        </li>\n        <li>\n          <span className=\"\">Item id</span>\n          <span className=\"\">{product.supplier_item_id}</span>\n        </li>\n        <li>\n          <span className=\"\">Category</span>\n          <span className=\"\">{product.supplier_item_category}</span>\n        </li>\n\n        <li>\n          <span className=\"\">Item cost</span>\n          <span className=\"\">\n            {product.supplier_item_cost} ({product.supplier_item_cost_currency})\n          </span>\n        </li>\n        <li>\n          <a href={product.supplier_item_url} className=\"text-underline\" target=\"_blank\" rel=\"noopener noreferrer\">\n            View supplier page\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { AdminView, StaffCoverUpdateForm, PublishedStatusSpan } from '@miq/adminjs';\nimport Form from '@miq/form';\nimport { isRequired } from '@miq/utils';\nimport { productServices } from './utils';\nimport { ProductImageAltTextInput } from './components';\nimport { SHOP_MSGS } from '../constants';\n\nconst isR = isRequired;\n\nexport function ProductQuickUpdateForm({ form, product, ...props }) {\n  const { setProduct, toast, categories } = props;\n  const productSlug = product?.slug;\n\n  useEffect(() => {}, [productSlug]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const fD = {\n      name: form.values.name,\n      retail_price: form.values.retail_price,\n      is_on_sale: form.values.is_on_sale,\n      is_pre_sale: form.values.is_pre_sale,\n    };\n\n    if (form.values.category) fD.category = form.values.category;\n    if (form.values.is_on_sale) fD.sale_price = form.values.sale_price;\n\n    if (form.values.is_pre_sale) fD.is_pre_sale_text = form.values.is_pre_sale_text;\n\n    return productServices\n      .patch(product.slug, fD)\n      .then((data) => {\n        setProduct?.({ ...product, ...data });\n        toast?.success({ message: SHOP_MSGS.product.update_success });\n      })\n      .catch((err) => {\n        toast?.error({ message: SHOP_MSGS.product.update_error });\n        return form.handleError(err);\n      });\n  };\n\n  return (\n    <ProductForm context={form} onSubmit={handleSubmit} className=\"quick-product-update-form\">\n      <div className=\"d-grid grid-md-3 gap-3\">\n        <div className=\"span-md-2\">\n          <AdminView.Section\n            title=\"Details\"\n            actions={<PublishedStatusSpan is_published={product?.page?.is_published} pill />}\n          >\n            <div className=\"mb-1\">\n              <ProductNameInput error={form.errors.name} />\n            </div>\n\n            {categories && (\n              <div className=\"mb-1\">\n                <ProductCategoryInput categories={categories} error={form?.errors?.category} />\n              </div>\n            )}\n\n            <div className=\"mb-1\">\n              <div className=\"mb-1\">\n                <ProductRetailPriceInput error={form?.errors?.retail_price} />\n              </div>\n\n              {/* PRE SALE */}\n              <div className=\"mb-1\">\n                <div className=\"d-flex align-items-center mb-1\">\n                  <ProductPresaleCheckboxInput error={form?.errors?.is_pre_sale} />\n                </div>\n\n                {form.values.is_pre_sale && (\n                  <div className=\"mb-2\">\n                    <ProductPresaleTextInput error={form?.errors?.is_pre_sale_text} />\n                  </div>\n                )}\n              </div>\n\n              {/* SALE  */}\n              <div className=\"d-flex align-items-center mb-1\">\n                <ProductOnSaleCheckboxInput error={form?.errors?.is_on_sale} />\n              </div>\n\n              {form.values.is_on_sale && (\n                <div className=\"mb-2\">\n                  <ProductSalePriceInput error={form?.errors?.sale_price} />\n                </div>\n              )}\n            </div>\n\n            <div className=\"my-3\">\n              <Form.Submit value=\"Update product\" className=\"btn btn-primary-3\" />\n            </div>\n          </AdminView.Section>\n        </div>\n      </div>\n    </ProductForm>\n  );\n}\n\n//#region INPUTS\n\nexport const ProductNameInput = (props) => {\n  const { showLabel = false, label = 'Name', ...input } = props;\n  const { placeholder = 'Give a name to the item', ...rest } = input;\n  return (\n    <>\n      {showLabel && <Form.Label value={label} className=\"mb-1\" />}\n      <Form.TextInput {...rest} required name=\"name\" placeholder={placeholder} maxLength={99} />\n    </>\n  );\n};\n\nexport const ProductDescriptionField = (props) => {\n  const { label, text, ...input } = props;\n  const { placeholder = 'Give a description to the item', ...rest } = input;\n  return (\n    <Form.Field {...{ label, text }}>\n      <Form.TextAreaX\n        {...rest}\n        name=\"description\"\n        // error={form.errors.description}\n        placeholder={placeholder}\n      />\n    </Form.Field>\n  );\n};\n\nexport const ProductCategoryInput = (props) => {\n  const { showLabel = false, label = 'Category', ...input } = props;\n  const { categories, ...rest } = input;\n\n  return (\n    <>\n      {showLabel && <Form.Label value={label} />}\n      <Form.SelectInput {...rest} required name=\"category\" nullValue={{ label: 'Sélectionnez une catégorie' }}>\n        {categories?.items?.map((cat) => {\n          return <Form.SelectInput.Option {...cat} key={cat.value} />;\n        })}\n      </Form.SelectInput>\n    </>\n  );\n};\n\nexport const ProductRetailPriceInput = (props) => {\n  const { showLabel = false, label = 'Retail price', ...rest } = props;\n\n  return (\n    <>\n      {showLabel && <Form.Label value={label} id=\"retail_price_label\" />}\n      <Form.TextInput\n        {...rest}\n        required\n        type=\"number\"\n        name=\"retail_price\"\n        aria-describedby=\"retail_price_label\"\n        min=\"0\"\n        step=\"0.01\"\n      />\n    </>\n  );\n};\n\nexport const ProductPresaleCheckboxInput = (props) => {\n  const { showLabel = false, label = 'Pre-sale', ...rest } = props;\n\n  return (\n    <div className=\"d-flex align-items-center\">\n      <Form.CheckboxInput {...rest} name=\"is_pre_sale\" className=\"me-2\" />\n      <Form.Label value={label} />\n    </div>\n  );\n};\n\nexport const ProductPresaleTextInput = (props) => {\n  return (\n    <>\n      <Form.Label value=\"Pre sale text\" id=\"is_pre_sale_text_label\" className=\"miq-checkbox-label\" />\n      <Form.TextAreaX name=\"is_pre_sale_text\" aria-describedby=\"is_pre_sale_text_label\" />\n    </>\n  );\n};\n\nexport const ProductOnSaleCheckboxInput = (props) => {\n  const { showLabel = false, label = 'On Sale', ...rest } = props;\n\n  return (\n    <div className=\"d-flex align-items-center\">\n      <Form.CheckboxInput {...rest} name=\"is_on_sale\" className=\"me-2\" />\n      <Form.Label value={label} />\n    </div>\n  );\n};\n\nexport const ProductSalePriceInput = (props) => {\n  const { showLabel = false, label = 'Sale price', ...rest } = props;\n  return (\n    <>\n      {showLabel && <Form.Label value={label} id=\"sale_price_label\" className=\"miq-checkbox-label\" />}\n      <Form.TextInput\n        {...rest}\n        required\n        type=\"number\"\n        name=\"sale_price\"\n        aria-describedby=\"sale_price_label\"\n        min=\"0\"\n        step=\"0.01\"\n      />\n    </>\n  );\n};\n\nexport const ProductStageSelect = (props) => {\n  const { showLabel = false, label = 'Stage', ...input } = props;\n  const { stages, name, ...rest } = input;\n\n  return (\n    <>\n      {showLabel && <Form.Label value={label} />}\n      <Form.SelectInput {...rest} required name={name || 'stage'} nullValue={{ label: 'Select stage' }}>\n        {stages?.map?.((stage) => {\n          return <Form.SelectInput.Option {...stage} key={stage.value} />;\n        })}\n      </Form.SelectInput>\n    </>\n  );\n};\n\n//#endregion INPUTS\n\n//#region FORMS\n\nexport const ProductForm = ({ children, context, fields = [], prodSlug, ...props }) => {\n  const { onSuccess, onError, ...rest } = props;\n\n  const handleSubmit = (e) => {\n    if (!context || !fields) return;\n\n    e.preventDefault();\n    const fD = {\n      // name: context.values.name,\n      // retail_price: form.values.retail_price,\n      // is_on_sale: form.values.is_on_sale,\n      // is_pre_sale: form.values.is_pre_sale,\n    };\n\n    fields.forEach((field) => {\n      const value = context.values[field];\n      if (value == null) return;\n      fD[field] = value;\n    });\n\n    // if (form.values.category) fD.category = form.values.category;\n    // if (form.values.is_on_sale) fD.sale_price = form.values.sale_price;\n\n    // if (form.values.is_pre_sale) fD.is_pre_sale_text = form.values.is_pre_sale_text;\n    if (!prodSlug) return;\n\n    return productServices\n      .patch(prodSlug, fD)\n      .then((data) => {\n        props?.onSuccess?.(data);\n      })\n      .catch((err) => {\n        if (props.onError) return props.onError(err);\n        return context.handleError(err);\n      });\n  };\n  return (\n    <Form {...rest} context={context} onSubmit={props.onSubmit || handleSubmit}>\n      {children}\n    </Form>\n  );\n};\n\nProductForm.NameInput = ProductNameInput;\nProductForm.DescField = ProductDescriptionField;\nProductForm.CategoryInput = ProductCategoryInput;\nProductForm.RetailPriceInput = ProductRetailPriceInput;\nProductForm.PresaleCheckboxInput = ProductPresaleCheckboxInput;\nProductForm.PresaleTextInput = ProductPresaleTextInput;\nProductForm.OnSaleCheckboxInput = ProductOnSaleCheckboxInput;\nProductForm.SalePriceInput = ProductSalePriceInput;\nProductForm.StageSelect = ProductStageSelect;\n\n//#endregion\n\n//#region BUTTONS\n//#endregion\n","import { IBtnSave, ConfirmIconButton, Icons, Button } from '@miq/components'\n\nimport Form, { useForm } from '@miq/form'\nimport { productServices } from './utils'\n\nconst AttrNameInput = (props) => (\n  <Form.TextInput placeholder=\"Nom de l'attribut\" {...props} required name=\"name\" maxLength={30} minLength={3} />\n)\n\nconst AttrValueInput = (props) => (\n  <Form.TextInput placeholder=\"Valeur de l'attribut\" {...props} required name=\"value\" maxLength={99} minLength={3} />\n)\n\nexport const AttributeUpdateForm = ({ instance, product, ...props }) => {\n  const form = useForm({ name: instance?.name || '', value: instance?.value || '' })\n\n  if (!instance || !instance.slug || !product || !product.slug) return null\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    return productServices\n      .patchAttribute(product.slug, instance.slug, form.values)\n      .then((data) => {\n        return props?.onSuccess(data)\n      })\n      .catch((err) => {\n        return form.handleError(err)\n      })\n  }\n\n  return (\n    <Form context={form} onSubmit={handleSubmit}>\n      <div className=\"d-flex flex-column flex-md-row\" style={{ alignItems: 'end' }}>\n        <div className=\"me-md-1\">\n          <AttrNameInput error={form.errors.name} />\n        </div>\n\n        <div className=\"w-100 me-md-1\">\n          <AttrValueInput error={form.errors.value} />\n        </div>\n\n        <div className=\"d-flex ms-md-1\">\n          <ConfirmIconButton\n            Icon={Icons.Trash}\n            render={(args) => (\n              <div className=\"p-3 w-100 d-flex justify-content-center\">\n                <div className=\"w-md-50 d-flex align-items-center justify-content-between\">\n                  <div>\n                    <Button\n                      onClick={() =>\n                        productServices\n                          .deleteAttribute(product.slug, instance.slug)\n                          .then((data) => {\n                            args?.setOpen(false)\n                            return props?.onSuccess(data)\n                          })\n                          .catch(() => {\n                            props?.toast?.error({ message: 'Could not delete attribute.' })\n                          })\n                      }\n                      className=\"btn-danger\"\n                    >\n                      Supprimer\n                    </Button>\n                  </div>\n                  <div>\n                    <Button onClick={() => args?.setOpen(false)}>Annuler</Button>\n                  </div>\n                </div>\n              </div>\n            )}\n            renderHeader={(args) => {\n              return (\n                <div className=\"p-3\">\n                  <div className=\"fw-bold\">Supprimer l'attribut \"{instance.name}\"</div>\n                </div>\n              )\n            }}\n            className=\"btn-danger-3 me-1\"\n          />\n          <Form.Submit value=\"Save\" className=\"btn btn-primary-2\" />\n        </div>\n      </div>\n    </Form>\n  )\n}\n\nexport function AttributeCreateForm({ product, ...props }) {\n  const initValues = { name: '', value: '' }\n  const form = useForm(initValues)\n\n  if (!product || !product.slug) return null\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    // if (form.hasErrors()) return;\n\n    return productServices\n      .postAttribute(product.slug, form.values)\n      .then((data) => {\n        form.setValues(initValues)\n        return props?.onSuccess(data)\n      })\n      .catch((err) => {\n        return form.handleError(err)\n      })\n  }\n\n  // const invalidAttrNames = product?.attributes?.map((at) => at.name) || [];\n\n  return (\n    <Form context={form} onSubmit={handleSubmit}>\n      <div className=\"d-flex flex-column flex-md-row\" style={{ alignItems: 'end' }}>\n        <div className=\"me-md-1\">\n          <Form.Label value=\"Name\" />\n          <AttrNameInput error={form.errors.name} />\n        </div>\n\n        <div className=\"w-100 me-md-1\">\n          <Form.Label value=\"Value\" />\n          <AttrValueInput error={form.errors.value} />\n        </div>\n\n        <div className=\"ms-md-1\">\n          <IBtnSave type=\"submit\" className=\"btn-primary-3\" />\n        </div>\n      </div>\n    </Form>\n  )\n}\n","import { useContext, useEffect, useState } from 'react';\n\nimport { AdminView } from '@miq/adminjs';\nimport Form, { useForm } from '@miq/form';\nimport { getClassName } from '@miq/utils';\nimport { ToastCtx, Button, Img, ImgDeleteIconButton } from '@miq/components';\n\nimport { SupplierData } from '../orders/components';\n\nimport { productServices } from './utils';\nimport { ProductImageAltTextInput, ProductImageUploadButton } from './components';\nimport { AttributeCreateForm, AttributeUpdateForm } from './Attribute';\nimport { ProductQuickUpdateForm, ProductForm } from './forms';\nimport { SHOP_MSGS, SHOP_PATHS } from '../constants';\n\nexport const productFormDefaultValues = {\n  name: '',\n  description: '',\n  category: '',\n  retail_price: 0.0,\n  is_pre_sale: false,\n  is_pre_sale_text: '',\n  sale_price: 0.0,\n  is_on_sale: false,\n  //\n  title: '',\n  slug_public: '',\n};\n\nexport default function ProductUpdateStaffView(props) {\n  const { prodSlug } = props.match.params;\n\n  const [product, setProduct] = useState({});\n  const [tab, setTab] = useState('info');\n\n  const form = useForm(productFormDefaultValues);\n  const { setValues } = form;\n\n  useEffect(() => {\n    productServices\n      .detail(prodSlug)\n      .then((data) => {\n        setProduct(data);\n        setValues({\n          name: data.name || '',\n          description: data.description || '',\n          category: data.category || '',\n          retail_price: data?.retail_price || 0.0,\n          // PRESALE\n          is_pre_sale: data.is_pre_sale || false,\n          is_pre_sale_text: data.is_pre_sale_text || '',\n          // SALE\n          is_on_sale: data.is_on_sale || false,\n          sale_price: data?.sale_price || 0.0,\n          // SEO\n          title: data.page.title || '',\n          slug_public: data?.page?.slug_public || '',\n        });\n      })\n      .catch((err) => {\n        if (err.response) {\n          // toast.error({ message: \"Something went wrong\" });\n          console.log(err.response);\n          if (err.response.status === 404) {\n            return;\n          }\n        }\n      });\n  }, [prodSlug, setValues]);\n\n  if (!product) return null;\n\n  const { prev_slug, next_slug } = product;\n\n  return (\n    <AdminView\n      back={props?.back}\n      actions={\n        <div>\n          {prev_slug && (\n            <a href={SHOP_PATHS.productUpdate(prev_slug)} className=\"btn me-1\" title=\"Voir le produit précédent\">\n              Previous\n            </a>\n          )}\n          {next_slug && (\n            <a href={SHOP_PATHS.productUpdate(next_slug)} className=\"btn\" title=\"Voir le produit suivant\">\n              Next\n            </a>\n          )}\n        </div>\n      }\n      className=\"miq-container-1024 product-update-view\"\n    >\n      <div className=\"my-2\">\n        <div className=\"d-flex justify-content-center mb-3\">\n          <div className=\"d-flex align-items-center\">\n            <Button\n              onClick={() => setTab('info')}\n              className={getClassName(['me-1', tab === 'info' && 'btn-primary-3'])}\n            >\n              Info\n            </Button>\n            <Button\n              onClick={() => setTab('inventory')}\n              className={getClassName(['me-1', tab === 'inventory' && 'btn-primary-3'])}\n            >\n              Inventory\n            </Button>\n            <Button\n              onClick={() => setTab('imgs')}\n              className={getClassName(['me-1', tab === 'imgs' && 'btn-primary-3'])}\n            >\n              Images\n            </Button>\n            <Button onClick={() => setTab('setting')} className={getClassName([tab === 'setting' && 'btn-primary-3'])}>\n              Settings\n            </Button>\n          </div>\n        </div>\n\n        <ViewTabs\n          tab={tab}\n          prodSlug={prodSlug}\n          product={product}\n          setProduct={setProduct}\n          form={form}\n          onDelete={() => props?.history?.push(props.back)}\n        />\n      </div>\n    </AdminView>\n  );\n}\n\nconst ViewTabs = ({ tab, ...props }) => {\n  const { prodSlug, product, setProduct, form, toast } = props;\n\n  if (!product.slug) return null;\n\n  switch (tab) {\n    case 'imgs':\n      return null;\n\n    default:\n      return (\n        <div className=\"d-grid grid-md-3 gap-3\">\n          <div className=\"span-md-2\"></div>\n\n          <AdminView.Section\n            title=\"Status\"\n            text={\n              product.page.is_published\n                ? 'This product is published.'\n                : 'This product is not published. It does not show in your store.'\n            }\n            className=\"\"\n          >\n            {/* <ProductPublishButton product={product} setProduct={setProduct} toast={toast} form={form} /> */}\n          </AdminView.Section>\n        </div>\n      );\n  }\n};\n"],"sourceRoot":""}