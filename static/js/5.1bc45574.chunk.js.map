{"version":3,"sources":["../../../../packages/miq-sharedjs/src/editor/src/Section/utils.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/section-components.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/section-ui.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/section-renderers.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/TextSection/index.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/index.jsx","../../../../packages/miq-sharedjs/src/editor/src/PageEditor/utils.jsx","../../../../packages/miq-sharedjs/src/editor/src/PageEditor/index.jsx","../../../../packages/miq-sharedjs/src/editor/src/index.jsx","../../../../packages/miq-adminjs/src/settings/utils.jsx","../../../../packages/miq-adminjs/src/settings/GeneralLiveSettingsUpdateSection.jsx","../../../../packages/miq-adminjs/src/settings/GeneralSettingsUpdateView.jsx"],"names":["sectionRequiredProps","data","PropTypes","shape","slug","string","isRequired","context","isEdit","bool","sectionServices","path","docSlug","this","get","StaffService","sectionsReducer","state","results","action","type","payload","addOrUpdateArrayObject","filter","SectionDeleteButton","props","console","log","Icon","Icons","Trash","className","title","onClick","remove","SectionEditButton","Eye","PencilSquare","setEdit","SectionImgUploadButton","imgSlug","section","onCreate","onUpdate","rest","handleUpload","isUpdated","imgData","images","includes","push","html","render","image","patch","then","sectionData","SectionEditForm","form","children","value","TitleInput","TextInput","placeholder","name","SectionBody","id","getClassName","SectionHeader","SectionFooter","marked","setOptions","renderer","Renderer","highlight","code","lang","hljs","require","language","getLanguage","pedantic","gfm","breaks","sanitize","smartLists","smartypants","xhtml","componentToHtml","Component","ReactDOMServer","renderToStaticMarkup","text","CloseTemplateRender","style","backgroundImage","src","TxtSectionEdit","TxtSectionPreview","TextSection","forwardRef","ref","TextareaT","label","IS_DEV","displayName","SectionCtx","createContext","Section","useRef","useState","ctx","useMemo","SectionComponent","lazy","getSectionComponent","fallback","Provider","indexStaffServices","PageEditor","Sections","pageSlug","sourceType","sections","setSections","useEffect","list","source","source_type","handleSectionChange","newData","map","item","onDataChange","SectionEditor","sourceSlug","EditorSections","request","useReducer","dispatch","siteServices","settingSlug","values","oldValues","patchPath","SiteLiveSettingForm","setting","useForm","is_live","onSubmit","e","preventDefault","setSetting","catch","err","handleError","CheckboxInput","checked","Submit","close_template","SettingForm","contact_email","ga_tracking","fb_pixel","Object","keys","forEach","key","logo_data","logo","error","errors","Field","GeneralSettingsUpdateView","useContext","SharedDataCtx","site","settings","detail","siteForm","domain","patchSite","updateSite","Label","required","disabled","Boolean"],"mappings":"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","file":"static/js/5.1bc45574.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { API, StaffService } from '@miq/utils';\n\nexport const sectionRequiredProps = {\n  data: PropTypes.shape({ slug: PropTypes.string }).isRequired,\n  context: PropTypes.shape({ isEdit: PropTypes.bool }).isRequired,\n};\n\nclass SectionService extends StaffService {\n  constructor(path) {\n    super(path);\n  }\n\n  archive(docSlug) {\n    return this.get(`${this.path}${docSlug}/archive/`);\n  }\n}\n\nexport const sectionServices = new SectionService('sections/');\n\n// export const sectionService = {\n//   path: `sections/`,\n//   list(request, params) {\n//     console.log(params);\n//     return getService(request, this.path, params, 'SET_SECTIONS');\n//   },\n//   get(sectSlug, params, type = 'PREPEND_SECTION') {\n//     return actions.get(`${this.path}${sectSlug}/`, params, type);\n//   },\n//   post(values, type = 'PREPEND_SECTION') {\n//     return actions.post(`${path}`, values, type);\n//   },\n//   patch(sectSlug, values, oldValues) {\n//     return actions.patch(`${path}${sectSlug}/`, values, oldValues, 'UPDATE_SECTION');\n//   },\n//   delete(sectSlug) {\n//     return actions.delete(`${path}${sectSlug}/`, sectSlug, 'REMOVE_SECTION');\n//   },\n// };\n\nexport const sectionsReducer = (state = { results: [] }, action) => {\n  const { type, payload = {} } = action;\n  let { results } = payload;\n\n  switch (type) {\n    case 'SET_SECTIONS':\n      return { ...payload };\n\n    case 'APPEND_SECTION':\n      results = addOrUpdateArrayObject(state.results, payload, 'slug', true);\n      return { ...state, results };\n\n    case 'PREPEND_SECTION':\n      results = addOrUpdateArrayObject(state.results, payload);\n      return { ...state, results };\n\n    case 'UPDATE_SECTION':\n      results = addOrUpdateArrayObject(state.results, payload);\n      return { ...state, results };\n\n    case 'REMOVE_SECTION':\n      results = state.results.filter(({ slug }) => slug !== payload.slug);\n      return { ...state, results };\n\n    default:\n      return { ...state };\n  }\n};\n","import PropTypes from 'prop-types';\n\nimport { IconButton, Icons, Img, ImgUploadButton } from '@miq/components';\n\nimport { isRequired } from '@miq/utils';\nimport { sectionRequiredProps, sectionServices } from './utils';\nimport render from './section-renderers';\nimport Form, { FormProvider, useForm } from '@miq/form';\n\nexport const SectionAddButton = (props) => {\n  const { sourceSlug = isRequired('section source slug'), type = isRequired('section type') } = props;\n\n  const handleCreate = () => {\n    // pagesActions.postSection(sourceSlug, { type });\n  };\n\n  return <button onClick={handleCreate}>Add {type}</button>;\n};\n\nexport const SectionSaveButton = (props) => {\n  const { form = isRequired('form context') } = props;\n  const { data = isRequired('section data') } = props;\n  const { context = isRequired('section context') } = props;\n\n  const handleSave = (e) => {\n    const shouldSave = data.text !== form.values.text;\n    console.log('Saving', shouldSave);\n\n    if (!shouldSave) return context.setEdit(!context.isEdit);\n    if (!props.onSave) return;\n\n    props.onSave();\n  };\n\n  return (\n    <IconButton Icon={Icons.ArrowUpCircle} label=\"Save\" className=\"section-btn\" title=\"Save\" onClick={handleSave} />\n  );\n};\n\nSectionSaveButton.propTypes = {\n  ...sectionRequiredProps,\n  form: PropTypes.any.isRequired,\n};\n\nexport const SectionDeleteButton = (props) => {\n  console.log(props);\n  const { context = isRequired('section context') } = props;\n  const { data = isRequired('section data') } = props;\n\n  return (\n    <IconButton\n      {...props}\n      Icon={Icons.Trash}\n      className=\"section-btn btn-danger\"\n      title=\"Delete\"\n      onClick={() => context.remove(data.slug)}\n    />\n  );\n};\n\nexport const SectionEditButton = (props) => {\n  const { context = isRequired('section context') } = props;\n  const { isEdit } = context;\n\n  return (\n    <IconButton\n      Icon={isEdit ? Icons.Eye : Icons.PencilSquare}\n      className=\"section-btn\"\n      title={isEdit ? 'Preview Mode' : 'Edit Mode'}\n      onClick={() => context.setEdit(!isEdit)}\n    />\n  );\n};\n\nSectionEditButton.propTypes = {\n  ...sectionRequiredProps,\n};\n\nexport const SectionImgUploadButton = ({ imgSlug, section = isRequired('Section data'), ...props }) => {\n  if (!section.slug) return null;\n\n  const { type } = section;\n  const { onCreate, onUpdate, ...rest } = props;\n\n  const handleUpload = ({ isUpdated, ...imgData }) => {\n    const { slug } = imgData;\n\n    // TODO\n    let images = section.images;\n    if (!images.includes(slug)) {\n      images.push(slug);\n      // section.images_data.push(imgData);\n    }\n\n    const html = render({ ...section, image: imgData, images });\n\n    return sectionServices\n      .patch(section.slug, { type, images, html }, { type, images: section.images, html: section.html })\n      .then((sectionData) => {\n        if (sectionData.isUpdated) {\n          if (imgSlug && onUpdate) return onUpdate(sectionData);\n\n          onCreate && onCreate(sectionData);\n        }\n      });\n  };\n\n  return <ImgUploadButton {...rest} onCreate={handleUpload} onUpdate={handleUpload} slug={imgSlug} />;\n};\n\nSectionImgUploadButton.propTypes = {\n  // section: PropTypes.shape({ ...sectionRequiredProps }).isRequired,\n  imgSlug: PropTypes.string,\n};\n\n/**\n * FORM BUTTONS\n */\n\n/**\n * FORM INPUTS\n */\n\nexport const SectionTitleInput = (props) => {\n  return <Form.TextInput placeholder=\"Write title...\" {...props} name=\"title\" />;\n};\n\nexport const SectionTextInput = (props) => {\n  return <Form.TextInput placeholder=\"Write text...\" {...props} name=\"text\" />;\n};\n\n/**\n * FORM\n */\n\nexport const SectionEditForm = ({ form = isRequired('form'), children, ...props }) => {\n  return <FormProvider value={form}>{children}</FormProvider>;\n};\n\nSectionEditForm.TitleInput = SectionTitleInput;\nSectionEditForm.TextInput = SectionTextInput;\n","import { getClassName } from '@miq/utils';\n\nexport const SectionBody = ({ children, id, className }) => (\n  <div id={id} className={getClassName(['section-body', className])}>\n    {children}\n  </div>\n);\n\nexport const SectionHeader = ({ children, Icon, id, className }) => (\n  <div id={id} className={getClassName(['section-header', className])}>\n    {Icon && (\n      <div className=\"\">\n        <Icon className=\"icon\" />\n      </div>\n    )}\n\n    {children}\n  </div>\n);\n\nexport const SectionFooter = ({ children, id, className }) => (\n  <div id={id} className={getClassName(['section-footer', className])}>\n    {children}\n  </div>\n);\n","import ReactDOMServer from 'react-dom/server';\nimport marked from 'marked';\n\nimport { isRequired } from '@miq/utils';\nimport { Jumbotron } from '@miq/components';\n\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  highlight: function (code, lang) {\n    const hljs = require('highlight.js');\n    const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n\n    return hljs.highlight(code, { language }).value;\n  },\n  pedantic: false,\n  gfm: true,\n  breaks: false,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false,\n  xhtml: false,\n});\n\nexport const componentToHtml = (Component) => ReactDOMServer.renderToStaticMarkup(Component);\n\nexport default function render(data) {\n  const { type = isRequired('section type') } = data;\n\n  switch (type) {\n    case 'MD':\n      return marked(data.text);\n\n    case 'JUMB':\n      return componentToHtml(<Jumbotron {...data} />);\n\n    case 'CLOSE':\n      return componentToHtml(<CloseTemplateRender {...data} />);\n\n    default:\n      return `<div>${data.text}</div>`;\n  }\n}\n\n/**\n * UI\n */\n\nconst CloseTemplateRender = (data = {}) => {\n  const { title, text, image } = data;\n\n  return (\n    <div className=\"close-template\" style={{ backgroundImage: image ? `url(${image.src})` : null }}>\n      <div className=\"close-template-inner\">\n        <div className=\"text-center p-3\">\n          {title && <h1 className=\"close-template-title mb-1\">{title}</h1>}\n          {text && <h3 className=\"close-template-text\">{text}</h3>}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { getClassName, IS_DEV } from \"@miq/utils\";\nimport { forwardRef } from \"react\";\nimport { Icons } from \"@miq/components\";\nimport { SectionDeleteButton, SectionEditButton } from \"../section-components\";\nimport { SectionBody, SectionFooter, SectionHeader } from \"../section-ui\";\n\nimport \"./txt-section.scss\";\n\n/**\n * TEXT SECTION\n */\n\nconst TxtSectionEdit = (props) => {\n    return <div className=\"\">TxtSectionEdit</div>;\n};\n\nconst TxtSectionPreview = (props) => {\n    if (props.context.isEdit) return <TxtSectionEdit {...props} />;\n\n    return <div className=\"\">Prev</div>;\n};\n\nconst TextSection = forwardRef((props, ref) => {\n    return (\n        <div id={props.id} {...{ ref }} className={getClassName([props.className])}>\n            <SectionHeader Icon={Icons.TextareaT} />\n\n            <SectionBody>\n                <TxtSectionPreview {...props} />\n            </SectionBody>\n\n            <SectionFooter>\n                <div className=\"actions\">\n                    <SectionDeleteButton {...props} label=\"Delete\" />\n\n                    <SectionEditButton context={props.context} />\n                </div>\n            </SectionFooter>\n        </div>\n    );\n});\n\nif (IS_DEV) {\n    TextSection.displayName = \"TextSection\";\n}\n\nexport default TextSection;\n","import PropTypes from 'prop-types';\n\nimport { createContext, lazy, Suspense, useMemo, useRef, useState } from 'react';\n\nimport { getClassName, isRequired } from '@miq/utils';\nimport TextSection from './TextSection';\n\nimport './section.scss';\n// import { sectionServices } from './utils';\n\n// const MarkdownSection = lazy(()=>import('./MarkdownSection'))\n// const ImageSection = lazy(() => import(\"./ImageSection\"));\n\nconst getSectionComponent = (type) => {\n  switch (type) {\n    case 'MD':\n      return lazy(() => import('./MarkdownSection'));\n    // return MarkdownSection;\n    case 'IMG':\n      return lazy(() => import('./ImageSection'));\n    case 'JUMB':\n      return lazy(() => import('./JumbotronSection'));\n    case 'CLOSE':\n      return lazy(() => import('./CloseTemplateSection'));\n\n    default:\n      return TextSection;\n  }\n};\n\nconst SectionCtx = createContext();\n\nexport default function Section(props) {\n  const { data = isRequired('section data props') } = props;\n  const { slug, type } = data;\n\n  const ref = useRef();\n  const [isEdit, setEdit] = useState(props.isEdit || false);\n\n  const ctx = useMemo(() => {\n    return { isEdit, setEdit };\n  }, [isEdit]);\n\n  if (!slug) return null;\n\n  const SectionComponent = getSectionComponent(type);\n\n  return (\n    <Suspense fallback={<div>Loading ...</div>}>\n      <SectionCtx.Provider value={ctx}>\n        <SectionComponent\n          {...props}\n          context={ctx}\n          ref={ref}\n          className={getClassName(['section', isEdit && 'active'])}\n        />\n      </SectionCtx.Provider>\n    </Suspense>\n  );\n}\n\nSection.propTypes = {\n  data: PropTypes.shape({ type: PropTypes.string.isRequired, slug: PropTypes.string }).isRequired,\n  onDataChange: PropTypes.func,\n};\n","import { StaffService } from '@miq/utils';\n\nclass IndexSettingStaffService extends StaffService {\n  constructor(path) {\n    super(path);\n  }\n}\nexport const indexStaffServices = new IndexSettingStaffService('index/');\n\nclass PageStaffService extends StaffService {\n  constructor(path) {\n    super(path);\n  }\n}\n\nexport const pageStaffServices = new PageStaffService('pages/');\n","import React, { useEffect, useState } from 'react';\nimport { isRequired } from '@miq/utils';\nimport { indexStaffServices, pageStaffServices } from './utils';\nimport { sectionServices } from '../Section/utils';\nimport { Section } from '..';\n\nexport const PageEditor = ({ children, ...props }) => {\n  return <div className=\"miq-page-editor\">{children}</div>;\n};\n\nexport const PageEditorSections = ({\n  pageSlug = isRequired('page slug'),\n  sourceType = isRequired('page type(page/index)'),\n  ...props\n}) => {\n  const [sections, setSections] = useState({ results: [] });\n  useEffect(() => {\n    if (!pageSlug) return;\n\n    sectionServices.list({ source: pageSlug, source_type: sourceType }).then((data) => {\n      setSections(data);\n    });\n  }, [pageSlug, sourceType]);\n\n  const handleSectionChange = (newData) => {\n    console.log(newData);\n    setSections({\n      ...sections,\n      results: sections.results.map((item) => {\n        if (item.slug === newData.slug) return newData;\n        return item;\n      }),\n    });\n  };\n\n  return (\n    <div className=\"miq-page-editor-sections\">\n      {sections.results.map((data) => (\n        <Section data={data} key={data.slug} onDataChange={handleSectionChange} />\n      ))}\n    </div>\n  );\n};\n\n//\n\nPageEditor.propTypes = {};\nPageEditor.Sections = PageEditorSections;\n\n//\n\nexport { indexStaffServices, pageStaffServices };\n","import React, { useEffect, useReducer } from 'react';\n\nimport { isRequired } from '@miq/utils';\nimport './index.scss';\n\nimport Section from './Section';\nimport { sectionsReducer, sectionServices } from './Section/utils';\n\nexport default function SectionEditor({ sourceSlug = isRequired('source slug'), children, ...props }) {\n  return <div className=\"\">{children}</div>;\n}\n\nexport const EditorSections = ({\n  sourceSlug = isRequired('source slug'),\n  request = isRequired('request'),\n  ...props\n}) => {\n  const [sections, dispatch] = useReducer(sectionsReducer, { results: [] });\n\n  useEffect(() => {\n    if (!sourceSlug) return;\n\n    sectionServices.list(request, { source: sourceSlug }).then((data) => {\n      dispatch({ type: 'SET_SECTIONS', payload: data });\n      // setLoading(0);\n    });\n  }, [sourceSlug, request]);\n\n  return (\n    <div className=\"editor-panel\">\n      <div className=\"editor-content\">\n        <div className=\"editor-label\">{/* <Form.TextAreaX name=\"label\" tabIndex={1} maxLength={250} /> */}</div>\n\n        <div className=\"editor-sections\">\n          {sections.results.map((data) => (\n            <Section data={data} key={data.slug} />\n          ))}\n        </div>\n\n        <div className=\"editor-actions\">\n          {/* <SectionAddButton sourceSlug={props.sourceSlug} type=\"TXT\" />\n                    <SectionAddButton sourceSlug={props.sourceSlug} type=\"MD\" />\n                    <SectionAddButton sourceSlug={props.sourceSlug} type=\"IMG\" /> */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n//\n\nexport { Section };\n\nexport * from './PageEditor';\n","import { StaffService } from '@miq/utils';\n\nclass SiteSettingsStaffService extends StaffService {\n  constructor(path) {\n    super(path);\n  }\n\n  patchSite(settingSlug, values, oldValues) {\n    return this.patchPath(`${this.path}${settingSlug}/site/`, values, oldValues);\n  }\n}\n\nexport const siteServices = new SiteSettingsStaffService('settings/');\n","import React from 'react';\n\nimport Form, { useForm } from '@miq/form/';\nimport { Section as SectionComponent } from '@miq/editor';\n\nimport { AdminView } from '../views';\nimport { siteServices } from './utils';\n\nexport default function SiteLiveSettingForm({ setting = {}, ...props }) {\n  const form = useForm({ is_live: setting.is_live || false });\n\n  if (!setting.slug) return null;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    return siteServices\n      .patch(setting.slug, { is_live: form.values.is_live }, { is_live: setting.is_live })\n      .then(({ isUpdated, ...data }) => {\n        if (isUpdated) props.setSetting(data);\n      })\n      .catch((err) => form.handleError(err));\n  };\n\n  const label = setting && setting.is_live ? 'This site is open to the public' : 'This site is close to the public.';\n\n  return (\n    <AdminView.Section title=\"Site Status\" text=\"Lock you site\">\n      <Form context={form} onSubmit={handleSubmit}>\n        <Form.CheckboxInput name=\"is_live\" checked={form.values.is_live} label={label} />\n\n        <div className=\"\">\n          <Form.Submit value=\"Save\" className=\"btn btn-primary-2\" />\n        </div>\n      </Form>\n\n      <SectionComponent\n        data={setting.close_template}\n        onDataChange={(sectionData) => props.setSetting({ ...setting, close_template: sectionData })}\n      />\n    </AdminView.Section>\n  );\n}\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport { SharedDataCtx } from '@miq/contexts';\nimport Form, { useForm } from '@miq/form/';\nimport { ImgUploadButton, Img } from '@miq/components';\n\nimport { AdminView } from '../views';\nimport { siteServices } from './utils';\nimport SiteLiveSettingForm from './GeneralLiveSettingsUpdateSection';\n\nconst SettingForm = ({ setting = {}, ...props }) => {\n  const form = useForm({\n    contact_email: setting.contact_email || '',\n    ga_tracking: setting.ga_tracking || '',\n    fb_pixel: setting.fb_pixel || '',\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const oldValues = {};\n    Object.keys(form.values).forEach((key) => {\n      oldValues[key] = setting[key];\n    });\n\n    return siteServices\n      .patch(setting.slug, form.values, oldValues)\n      .then(({ isUpdated, ...data }) => {\n        if (isUpdated) props.setSetting(data);\n      })\n      .catch((err) => form.handleError(err));\n  };\n\n  return (\n    <Form context={form} onSubmit={handleSubmit}>\n      <AdminView.Section title=\"Logo\" text=\"\">\n        <ImgUploadButton\n          slug={setting && setting.logo_data ? setting.logo_data.slug : null}\n          onCreate={(imgData) =>\n            siteServices\n              .patch(setting.slug, { logo: imgData.slug })\n              .then((data) => props.setSetting(data))\n              .catch((err) => {})\n          }\n          // onUpdate={handleCoverUpdate}\n          className=\"site-logo-upload-button\"\n        >\n          <Img {...setting.logo_data} className=\"site-logo\" />\n        </ImgUploadButton>\n      </AdminView.Section>\n\n      <AdminView.Section title=\"Contact\" text=\"What's the best way to contact you?\">\n        <Form.TextInput\n          name=\"contact_email\"\n          type=\"email\"\n          error={form.errors.contact_email}\n          placeholder=\"Write your contact email ...\"\n        />\n      </AdminView.Section>\n\n      <AdminView.Section title=\"Social\" text=\"Display Your social media accounts.\">\n        {/* <Form.TextInput name=\"contact_email\" type=\"url\" placeholder=\"write your instagram url ...\" /> */}\n      </AdminView.Section>\n\n      <AdminView.Section title=\"Analytics\" text=\"Set up third-party analytics.\">\n        <Form.Field label=\"Google Analytics Tracking Number\">\n          <Form.TextInput name=\"ga_tracking\" />\n        </Form.Field>\n\n        <Form.Field label=\"Facebook Pixel\">\n          <Form.TextInput name=\"fb_pixel\" />\n        </Form.Field>\n\n        <div className=\"\">\n          <Form.Submit value=\"Save\" className=\"btn btn-primary-2\" />\n        </div>\n      </AdminView.Section>\n    </Form>\n  );\n};\n\nexport default function GeneralSettingsUpdateView(props) {\n  const ctx = useContext(SharedDataCtx);\n  const [setting, setSetting] = useState({});\n\n  const settingSlug = ctx.site.settings;\n\n  useEffect(() => {\n    siteServices\n      .detail(settingSlug)\n      .then((data) => {\n        if (!data.slug) return;\n        setSetting(data);\n      })\n      .catch((err) => {});\n  }, [settingSlug]);\n\n  const { site } = ctx;\n  const siteForm = useForm({ name: site.name, domain: site.domain });\n\n  if (!setting.slug) return null;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { settings } = site;\n\n    if (!settings) {\n      return;\n    }\n\n    return siteServices\n      .patchSite(\n        settings,\n        { name: siteForm.values.name, domain: siteForm.values.domain },\n        { name: site.name, domain: site.domain }\n      )\n      .then(({ isUpdated, ...data }) => {\n        if (isUpdated) ctx.updateSite(data.site);\n      })\n      .catch((err) => siteForm.handleError(err));\n  };\n\n  return (\n    <AdminView title=\"Site General Settings\">\n      <Form context={siteForm} onSubmit={handleSubmit}>\n        <AdminView.Section title=\"Site Details\">\n          <div className=\"mb-1\">\n            <Form.Label value=\"Site name\" />\n            <Form.TextInput required name=\"name\" disabled={!Boolean(site.settings)} />\n          </div>\n\n          <div className=\"mb-1\">\n            <Form.Label value=\"Site domain\" />\n            <Form.TextInput required name=\"domain\" disabled={!Boolean(site.settings)} />\n          </div>\n\n          <div className=\"\">\n            <Form.Submit value=\"Save\" className=\"btn btn-primary-2\" />\n          </div>\n        </AdminView.Section>\n      </Form>\n\n      <SiteLiveSettingForm {...{ ctx, setting, setSetting }} />\n\n      <SettingForm {...{ ctx, setting, setSetting }} />\n    </AdminView>\n  );\n}\n"],"sourceRoot":""}