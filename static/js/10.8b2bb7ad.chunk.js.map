{"version":3,"sources":["../../../../packages/miq-adminjs/src/pages/utils.jsx","../../../../packages/miq-adminjs/src/pages/PageListView.jsx"],"names":["pagesServices","path","list","params","getService","API","this","get","pageSlug","PageListView","props","useState","results","data","setData","useEffect","then","catch","err","title","className","map","page","PageItem","slug","to","match","label","updated_since"],"mappings":"4LAQaA,EAAgB,CACzBC,KAAM,SACNC,KAFyB,SAEpBC,GACD,OAAOC,YAAWC,IAAKC,KAAKL,KAAME,IAEtCI,IALyB,SAKrBC,EAAUL,GACV,OAAOC,YAAWC,IAAD,UAASC,KAAKL,MAAd,OAAqBO,EAArB,KAAkCL,M,oMCP5C,SAASM,EAAaC,GACjC,MAAwBC,mBAAS,CAAEC,QAAS,KAA5C,mBAAOC,EAAP,KAAaC,EAAb,KASA,OAPAC,qBAAU,WACNf,IACKE,OACAc,MAAK,SAACH,GAAD,OAAUC,EAAQD,MACvBI,OAAM,SAACC,SACb,IAGC,cAAC,IAAD,CAAWC,MAAM,QAAjB,SACI,oBAAIC,UAAU,YAAd,SACKP,EAAKD,QAAQS,KAAI,SAACC,GAAD,OACd,oBAAIF,UAAU,iBAAd,SACI,cAACG,EAAD,2BAAcb,GAAd,IAA2BY,WADKA,EAAKE,aAStD,IAAMD,EAAW,SAAC,GAA6B,IAAD,IAA1BD,YAA0B,MAAnB,GAAmB,EAAZZ,EAAY,iBACjD,OACI,eAAC,IAAD,CAAMe,GAAE,UAAKf,EAAMgB,MAAMzB,MAAjB,OAAwBqB,EAAKE,KAA7B,KAAsCJ,UAAU,YAAxD,UACI,oBAAIA,UAAU,aAAd,SAA4BE,EAAKK,QACjC,sBAAKP,UAAU,YAAf,UACI,qBAAKA,UAAU,gBACf,sBAAMA,UAAU,qBAAhB,mBAAyCE,EAAKM,cAA9C","file":"static/js/10.8b2bb7ad.chunk.js","sourcesContent":["import { getService } from \"@miq/utils\";\nimport { API } from \"../utils\";\n// import { PAGE_CREATE_PATH } from \"../editor\";\n\nconst initialState = { results: [], items: {} };\n\nconst actions = {};\n\nexport const pagesServices = {\n    path: \"pages/\",\n    list(params) {\n        return getService(API, this.path, params);\n    },\n    get(pageSlug, params) {\n        return getService(API, `${this.path}${pageSlug}/`, params);\n    },\n};\n\nexport const pagesActions = {\n    post(values) {\n        return actions.post(`${this.path}`, values, \"ADD_UPDATE_PAGE\");\n    },\n    patch(pageSlug, values, oldValues) {\n        return actions.patch(`${this.path}${pageSlug}/`, values, oldValues);\n    },\n    postSection(pageSlug, values) {\n        return actions.post(`${this.path}${pageSlug}/section/`, values, \"APPEND_SECTION\");\n    },\n    delete(pageSlug) {\n        return actions.delete(`${this.path}${pageSlug}/`, pageSlug, \"REMOVE_PAGE\");\n    },\n};\n\nexport const pagesReducer = (state = initialState, action) => {\n    const { type, payload = {} } = action;\n    let items;\n\n    switch (type) {\n        case \"SET_PAGES\":\n            const { results, ...rest } = payload;\n            state = { ...rest };\n\n            if (results) {\n                items = {};\n\n                results.forEach((item) => {\n                    items[`${item.slug}`] = item;\n                });\n                state = { ...state, items };\n            }\n            return state;\n\n        case \"ADD_UPDATE_PAGE\":\n            items = { ...state.items, [payload.slug]: payload };\n            return { ...state, items };\n\n        case \"REMOVE_PAGE\":\n            items = state.items;\n            delete items[payload.slug];\n            return { ...state, items };\n\n        default:\n            return { ...state };\n    }\n};\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nimport { AdminView } from \"../views\";\nimport { pagesServices } from \"./utils\";\n\nexport default function PageListView(props) {\n    const [data, setData] = useState({ results: [] });\n\n    useEffect(() => {\n        pagesServices\n            .list()\n            .then((data) => setData(data))\n            .catch((err) => {});\n    }, []);\n\n    return (\n        <AdminView title=\"Pages\">\n            <ul className=\"page-list\">\n                {data.results.map((page) => (\n                    <li className=\"page-list-item\" key={page.slug}>\n                        <PageItem {...props} {...{ page }} />\n                    </li>\n                ))}\n            </ul>\n        </AdminView>\n    );\n}\n\nexport const PageItem = ({ page = {}, ...props }) => {\n    return (\n        <Link to={`${props.match.path}${page.slug}/`} className=\"page-item\">\n            <h3 className=\"page-label\">{page.label}</h3>\n            <div className=\"page-meta\">\n                <div className=\"page-status\"></div>\n                <span className=\"page-updated-since\">{`${page.updated_since} ago`}</span>\n            </div>\n        </Link>\n    );\n};\n\nPageListView.propTypes = {\n    match: PropTypes.shape({ url: PropTypes.string.isRequired }).isRequired,\n};\n"],"sourceRoot":""}