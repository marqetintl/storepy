{"version":3,"sources":["../../../../packages/miq-sharedjs/src/editor/src/Section/section-components.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/section-ui.jsx","../../../../packages/miq-adminjs/src/pages/utils.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/TextSection/index.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/index.jsx","../../../../packages/miq-sharedjs/src/editor/src/Section/utils.jsx","../../../../packages/miq-sharedjs/src/editor/src/index.jsx","../../../../packages/miq-adminjs/src/pages/PageUpdateView/index.jsx"],"names":["SectionSaveButton","props","context","isRequired","form","data","Icon","Icons","ArrowUpCircle","label","className","title","onClick","e","shouldSave","text","values","console","log","setEdit","isEdit","onSave","SectionDeleteButton","Trash","remove","slug","SectionEditButton","Eye","PencilSquare","SectionBody","children","id","getClassName","SectionHeader","SectionFooter","pagesServices","path","list","params","getService","API","this","get","pageSlug","TxtSectionEdit","TxtSectionPreview","TextSection","forwardRef","ref","TextareaT","IS_DEV","displayName","SectionCtx","createContext","Section","type","useRef","useState","ctx","useMemo","Component","lazy","getSectionComponent","fallback","Provider","value","sectionService","request","sectSlug","actions","post","patch","oldValues","delete","sectionsReducer","state","results","action","payload","addOrUpdateArrayObject","filter","Editor","sourceSlug","EditorSections","useReducer","sections","dispatch","useEffect","source","then","map","PageUpdateView","match","page","setPage","catch","err"],"mappings":"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","file":"static/js/4.514fa762.chunk.js","sourcesContent":["import { IconButton, Icons } from \"@miq/components\";\nimport { isRequired } from \"@miq/utils\";\n// import { pagesActions } from \"../../pages/utils\";\n\nexport const SectionAddButton = (props) => {\n    const { sourceSlug = isRequired(\"section source slug\"), type = isRequired(\"section type\") } = props;\n\n    const handleCreate = () => {\n        // pagesActions.postSection(sourceSlug, { type });\n    };\n\n    return <button onClick={handleCreate}>Add {type}</button>;\n};\n\nexport const SectionSaveButton = (props) => {\n    const { context = isRequired(\"section context\") } = props;\n    const { form = isRequired(\"form context\") } = props;\n    const { data = isRequired(\"section data\") } = props;\n\n    const handleSave = (e) => {\n        const shouldSave = data.text !== form.values.text;\n        console.log(\"Saving\", shouldSave);\n\n        if (!shouldSave) return context.setEdit(!context.isEdit);\n        if (!props.onSave) return;\n\n        props.onSave();\n    };\n\n    return (\n        <IconButton Icon={Icons.ArrowUpCircle} label=\"Save\" className=\"section-btn\" title=\"Save\" onClick={handleSave} />\n    );\n};\n\nexport const SectionDeleteButton = (props) => {\n    console.log(props);\n    const { context = isRequired(\"section context\") } = props;\n    const { data = isRequired(\"section data\") } = props;\n\n    return (\n        <IconButton\n            {...props}\n            Icon={Icons.Trash}\n            className=\"section-btn btn-danger\"\n            title=\"Delete\"\n            onClick={() => context.remove(data.slug)}\n        />\n    );\n};\n\nexport const SectionEditButton = (props) => {\n    const { context = isRequired(\"section context\") } = props;\n    const { isEdit } = context;\n\n    if (isEdit) return <SectionSaveButton {...props} />;\n\n    return (\n        <IconButton\n            Icon={isEdit ? Icons.Eye : Icons.PencilSquare}\n            className=\"section-btn\"\n            title={isEdit ? \"Preview Mode\" : \"Edit Mode\"}\n            onClick={() => context.setEdit(!isEdit)}\n        />\n    );\n};\n","import { getClassName } from \"@miq/utils\";\n\nexport const SectionBody = ({ children, id, className }) => (\n    <div id={id} className={getClassName([\"section-body\", className])}>\n        {children}\n    </div>\n);\n\nexport const SectionHeader = ({ children, Icon, id, className }) => (\n    <div id={id} className={getClassName([\"section-header\", className])}>\n        {Icon && (\n            <div className=\"\">\n                <Icon className=\"icon\" />\n            </div>\n        )}\n\n        {children}\n    </div>\n);\n\nexport const SectionFooter = ({ children, id, className }) => (\n    <div id={id} className={getClassName([\"section-footer\", className])}>\n        {children}\n    </div>\n);\n","import { getService } from \"@miq/utils\";\nimport { API } from \"../utils\";\n// import { PAGE_CREATE_PATH } from \"../editor\";\n\nconst initialState = { results: [], items: {} };\n\nconst actions = {};\n\nexport const pagesServices = {\n    path: \"pages/\",\n    list(params) {\n        return getService(API, this.path, params);\n    },\n    get(pageSlug, params) {\n        return getService(API, `${this.path}${pageSlug}/`, params);\n    },\n};\n\nexport const pagesActions = {\n    post(values) {\n        return actions.post(`${this.path}`, values, \"ADD_UPDATE_PAGE\");\n    },\n    patch(pageSlug, values, oldValues) {\n        return actions.patch(`${this.path}${pageSlug}/`, values, oldValues);\n    },\n    postSection(pageSlug, values) {\n        return actions.post(`${this.path}${pageSlug}/section/`, values, \"APPEND_SECTION\");\n    },\n    delete(pageSlug) {\n        return actions.delete(`${this.path}${pageSlug}/`, pageSlug, \"REMOVE_PAGE\");\n    },\n};\n\nexport const pagesReducer = (state = initialState, action) => {\n    const { type, payload = {} } = action;\n    let items;\n\n    switch (type) {\n        case \"SET_PAGES\":\n            const { results, ...rest } = payload;\n            state = { ...rest };\n\n            if (results) {\n                items = {};\n\n                results.forEach((item) => {\n                    items[`${item.slug}`] = item;\n                });\n                state = { ...state, items };\n            }\n            return state;\n\n        case \"ADD_UPDATE_PAGE\":\n            items = { ...state.items, [payload.slug]: payload };\n            return { ...state, items };\n\n        case \"REMOVE_PAGE\":\n            items = state.items;\n            delete items[payload.slug];\n            return { ...state, items };\n\n        default:\n            return { ...state };\n    }\n};\n","import { getClassName, IS_DEV } from \"@miq/utils\";\nimport { forwardRef } from \"react\";\nimport { Icons } from \"@miq/components\";\nimport { SectionDeleteButton, SectionEditButton } from \"../section-components\";\nimport { SectionBody, SectionFooter, SectionHeader } from \"../section-ui\";\n\nimport \"./txt-section.scss\";\n\n/**\n * TEXT SECTION\n */\n\nconst TxtSectionEdit = (props) => {\n    return <div className=\"\">TxtSectionEdit</div>;\n};\n\nconst TxtSectionPreview = (props) => {\n    if (props.context.isEdit) return <TxtSectionEdit {...props} />;\n\n    return <div className=\"\">Prev</div>;\n};\n\nconst TextSection = forwardRef((props, ref) => {\n    return (\n        <div id={props.id} {...{ ref }} className={getClassName([props.className])}>\n            <SectionHeader Icon={Icons.TextareaT} />\n\n            <SectionBody>\n                <TxtSectionPreview {...props} />\n            </SectionBody>\n\n            <SectionFooter>\n                <div className=\"actions\">\n                    <SectionDeleteButton {...props} label=\"Delete\" />\n\n                    <SectionEditButton context={props.context} />\n                </div>\n            </SectionFooter>\n        </div>\n    );\n});\n\nif (IS_DEV) {\n    TextSection.displayName = \"TextSection\";\n}\n\nexport default TextSection;\n","import { createContext, lazy, Suspense, useMemo, useRef, useState } from \"react\";\n\nimport { getClassName, isRequired } from \"@miq/utils\";\nimport TextSection from \"./TextSection\";\n\nimport \"./section.scss\";\n\n// const MarkdownSection = lazy(()=>import('./MarkdownSection'))\n// const ImageSection = lazy(() => import(\"./ImageSection\"));\n\nconst getSectionComponent = (type) => {\n    switch (type) {\n        case \"MD\":\n            return lazy(() => import(\"./MarkdownSection\"));\n        // return MarkdownSection;\n        case \"IMG\":\n            return lazy(() => import(\"./ImageSection\"));\n        // return ImageSection;\n\n        default:\n            return TextSection;\n    }\n};\n\nconst SectionCtx = createContext();\n\nexport default function Section(props) {\n    const { data = isRequired(\"section data props\") } = props;\n    const { slug, type } = data;\n\n    const ref = useRef();\n    const [isEdit, setEdit] = useState(props.isEdit || false);\n\n    const ctx = useMemo(() => {\n        return {\n            isEdit,\n            setEdit,\n            // update: sectionActions.patch, remove: sectionActions.delete, dispatch\n        };\n    }, [isEdit]);\n\n    if (!slug) return null;\n\n    const Component = getSectionComponent(type);\n\n    return (\n        <Suspense fallback={<div>Loading ...</div>}>\n            <SectionCtx.Provider value={ctx}>\n                <Component\n                    {...props}\n                    context={ctx}\n                    ref={ref}\n                    className={getClassName([\"section\", isEdit && \"active\"])}\n                />\n            </SectionCtx.Provider>\n        </Suspense>\n    );\n}\n","import { getService } from \"@miq/utils\";\n\nexport const sectionService = {\n    path: `sections/`,\n    list(request, params) {\n        console.log(params);\n        return getService(request, this.path, params, \"SET_SECTIONS\");\n    },\n    get(sectSlug, params, type = \"PREPEND_SECTION\") {\n        return actions.get(`${this.path}${sectSlug}/`, params, type);\n    },\n    post(values, type = \"PREPEND_SECTION\") {\n        return actions.post(`${path}`, values, type);\n    },\n    patch(sectSlug, values, oldValues) {\n        return actions.patch(`${path}${sectSlug}/`, values, oldValues, \"UPDATE_SECTION\");\n    },\n    delete(sectSlug) {\n        return actions.delete(`${path}${sectSlug}/`, sectSlug, \"REMOVE_SECTION\");\n    },\n};\n\nexport const sectionsReducer = (state = { results: [] }, action) => {\n    const { type, payload = {} } = action;\n    let { results } = payload;\n\n    switch (type) {\n        case \"SET_SECTIONS\":\n            return { ...payload };\n\n        case \"APPEND_SECTION\":\n            results = addOrUpdateArrayObject(state.results, payload, \"slug\", true);\n            return { ...state, results };\n\n        case \"PREPEND_SECTION\":\n            results = addOrUpdateArrayObject(state.results, payload);\n            return { ...state, results };\n\n        case \"UPDATE_SECTION\":\n            results = addOrUpdateArrayObject(state.results, payload);\n            return { ...state, results };\n\n        case \"REMOVE_SECTION\":\n            results = state.results.filter(({ slug }) => slug !== payload.slug);\n            return { ...state, results };\n\n        default:\n            return { ...state };\n    }\n};\n","import React, { useEffect, useReducer } from \"react\";\n\nimport { isRequired } from \"@miq/utils\";\nimport \"./index.scss\";\n\nimport Section from \"./Section\";\nimport { sectionsReducer, sectionService } from \"./Section/utils\";\n\nexport default function Editor({ sourceSlug = isRequired(\"source slug\"), children, ...props }) {\n    return <div className=\"\">{children}</div>;\n}\n\nexport const EditorSections = ({\n    sourceSlug = isRequired(\"source slug\"),\n    request = isRequired(\"request\"),\n    ...props\n}) => {\n    const [sections, dispatch] = useReducer(sectionsReducer, { results: [] });\n\n    useEffect(() => {\n        if (!sourceSlug) return;\n\n        sectionService.list(request, { source: sourceSlug }).then((data) => {\n            dispatch({ type: \"SET_SECTIONS\", payload: data });\n            // setLoading(0);\n        });\n    }, [sourceSlug, request]);\n\n    return (\n        <div className=\"editor-panel\">\n            <div className=\"editor-content\">\n                <div className=\"editor-label\">{/* <Form.TextAreaX name=\"label\" tabIndex={1} maxLength={250} /> */}</div>\n\n                <div className=\"editor-sections\">\n                    {sections.results.map((data) => (\n                        <Section data={data} key={data.slug} />\n                    ))}\n                </div>\n\n                <div className=\"editor-actions\">\n                    {/* <SectionAddButton sourceSlug={props.sourceSlug} type=\"TXT\" />\n                    <SectionAddButton sourceSlug={props.sourceSlug} type=\"MD\" />\n                    <SectionAddButton sourceSlug={props.sourceSlug} type=\"IMG\" /> */}\n                </div>\n            </div>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\n\nimport EditorForm, { EditorSections } from \"@miq/editor\";\n\nimport { pagesServices } from \"../utils\";\nimport { API } from \"../../utils\";\n\nexport default function PageUpdateView(props) {\n    const { pageSlug } = props.match.params;\n\n    const [page, setPage] = useState({});\n\n    useEffect(() => {\n        if (!pageSlug) return;\n\n        pagesServices\n            .get(pageSlug)\n            .then((data) => setPage(data))\n            .catch((err) => {});\n    }, [pageSlug]);\n\n    if (!page || !page.slug) return null;\n\n    return (\n        <EditorForm sourceSlug={page.slug} className=\"\">\n            <div className=\"\">\n                {page.slug}\n\n                <EditorSections sourceSlug={page.slug} request={API} />\n            </div>\n        </EditorForm>\n    );\n}\n"],"sourceRoot":""}