{"version":3,"sources":["shop/product/utils.jsx","shop/product/components.jsx","shop/product/ListView.jsx"],"names":["productServices","prodSlug","values","oldValues","this","patchPath","path","StaffService","ProductRow","product","Tr","className","Td","to","slug","title","name","ProductTable","props","data","results","items","renderItem","item","key","pagination","count","next","previous","onPreviousClick","e","onNextClick","ProductNameInput","onSuccess","onError","placeholder","form","rest","Label","value","TextInput","required","onSave","patch","then","catch","err","error","errors","maxLength","ProductDescriptionInput","label","TextAreaX","description","ProductUpdateForm","children","context","NameInput","DescriptionInput","SlugPublicInput","slug_public","ProductCreateForm","useForm","onSubmit","preventDefault","post","handleError","ProductImageUploadButton","multiple","onCreate","imgsArray","filter","img","images","map","onCreateSuccess","onCreateError","ProductImageAltTextInput","image","alt_text","ProductCoverUploadButton","cover_data","cover","onUpdate","imgData","onUpdateSuccess","ProductTabDisplay","tab","onProductUpdate","Section","text","actions","isUpdated","images_data","i","onUpdateError","ProductItem","useState","setTab","is_published","page","onClick","ProductList","ProductListView","isAdding","setAdding","setData","toasts","useContext","ToastCtx","search","location","getProducts","useCallback","list","useEffect","params","URLSearchParams","length","message","newData","prodData"],"mappings":"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","file":"static/js/7.533aac93.chunk.js","sourcesContent":["import { StaffService } from \"@miq/adminjs\";\n\nclass StaffProductService extends StaffService {\n  // constructor(path) {\n  //   super(path);\n  // }\n\n  patchPage(prodSlug, values, oldValues) {\n    return this.patchPath(`${this.path}${prodSlug}/page/`, values, oldValues);\n  }\n}\n\nexport const productServices = new StaffProductService(\"products/\");\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nimport Form, { useForm, FormProvider } from \"@miq/form\";\nimport { ImageAltTextInput } from \"@miq/adminjs\";\nimport { Table, ItemTable, ImgUploadButton } from \"@miq/components\";\nimport { productServices } from \"./utils\";\n\nexport const ProductRow = ({ product, ...props }) => {\n  if (!product) return null;\n\n  return (\n    <Table.Tr className=\"\">\n      <Table.Td className=\"w-100\">\n        <Link to={`/staff/shop/products/${product.slug}/`}>\n          <div className=\"mb-1\" title={product.name}>\n            {product.name}\n          </div>\n        </Link>\n      </Table.Td>\n    </Table.Tr>\n  );\n};\n\nexport const ProductTable = (props) => {\n  const { data = { results: [] } } = props;\n\n  const handlePreviousClick = (e) => {};\n  const handleNextClick = (e) => {};\n\n  return (\n    <div>\n      <ItemTable\n        className=\"w-100\"\n        items={data.results}\n        renderItem={(item) => <ProductRow {...props} product={item} key={item.slug} />}\n        pagination={{\n          count: data.count,\n          next: data.next,\n          previous: data.previous,\n          onPreviousClick: handlePreviousClick,\n          onNextClick: handleNextClick,\n        }}\n      />\n    </div>\n  );\n};\n\nProductTable.propTypes = {\n  data: PropTypes.shape({ results: PropTypes.array }).isRequired,\n  setData: PropTypes.func.isRequired,\n};\n\n//\n// ========================= FORM COMPONENTS ===================================================================\n//\n\nexport const ProductCategoryInput = ({ onSuccess, onError, ...props }) => {\n  const { placeholder = \"Give a name to the item\", form } = props;\n  if (!form) return null;\n\n  return (\n    <>\n      <Form.Label value=\"Name\" className=\"mb-1\" />\n      <Form.TextInput {...props} name=\"name\" error={form.errors.name} placeholder={placeholder} maxLength={99} />\n    </>\n  );\n};\n\nexport const ProductNameInput = ({ onSuccess, onError, ...props }) => {\n  const { product, placeholder = \"Give a name to the item\", form, ...rest } = props;\n\n  if (!form) return null;\n\n  return (\n    <>\n      <Form.Label value=\"Name\" className=\"mb-1\" />\n      <Form.TextInput\n        {...rest}\n        required\n        name=\"name\"\n        onSave={({ value }) => {\n          if (!value || !product || !product.slug) return;\n\n          return productServices\n            .patch(product.slug, { name: value }, { name: product.name })\n            .then((data) => {\n              if (onSuccess) return onSuccess(data);\n            })\n            .catch((err) => {\n              if (onError) return onError(err);\n            });\n        }}\n        error={form.errors.name}\n        placeholder={placeholder}\n        maxLength={99}\n      />\n    </>\n  );\n};\n\nexport const ProductDescriptionInput = ({ onSuccess, onError, ...props }) => {\n  const { product, placeholder = \"Give a description to the item\", form, label, ...rest } = props;\n  if (!product || !form) return null;\n\n  return (\n    <>\n      {label && <Form.Label value=\"Description\" className=\"mb-1\" />}\n      <Form.TextAreaX\n        {...rest}\n        name=\"description\"\n        onSave={({ name, value }) =>\n          productServices\n            .patch(product.slug, { [name]: value }, { [name]: product[name] })\n            .then((data) => {\n              if (onSuccess) return onSuccess(data);\n            })\n            .catch((err) => {\n              if (onError) return onError(err);\n            })\n        }\n        error={form.errors.description}\n        placeholder={placeholder}\n      />\n    </>\n  );\n};\n\nexport const ProductSlugPublicInput = ({ onSuccess, onError, ...props }) => {\n  const { product, placeholder = \"Seo slug ...\", form, ...rest } = props;\n  if (!product || !form) return null;\n\n  return (\n    <>\n      <Form.Label value=\"Slug\" className=\"mb-1\" />\n      <Form.TextInput\n        {...rest}\n        required\n        name=\"slug_public\"\n        onSave={({ value }) =>\n          productServices\n            .patch(product.slug, { slug_public: value }, { slug_public: product.slug_public })\n            .then((data) => {\n              if (onSuccess) return onSuccess(data);\n            })\n            .catch((err) => {\n              if (onError) return onError(err);\n            })\n        }\n        error={form.errors.slug_public}\n        placeholder={placeholder}\n        maxLength={99}\n      />\n    </>\n  );\n};\n\nexport const ProductUpdateForm = ({ children, form, ...props }) => {\n  if (!form) return null;\n  return (\n    <Form {...props} context={form}>\n      {children}\n    </Form>\n  );\n};\n\nProductUpdateForm.NameInput = ProductNameInput;\nProductUpdateForm.DescriptionInput = ProductDescriptionInput;\nProductUpdateForm.SlugPublicInput = ProductSlugPublicInput;\n\nexport const ProductCreateForm = ({ onSuccess, onError, ...props }) => {\n  const form = useForm({ name: \"\" });\n\n  return (\n    <Form\n      {...props}\n      context={form}\n      onSubmit={(e) => {\n        e.preventDefault();\n        return productServices\n          .post({ name: form.values.name })\n          .then((data) => {\n            if (onSuccess) return onSuccess(data);\n          })\n          .catch((err) => {\n            if (onError) return onError(err);\n            form.handleError(err);\n          });\n      }}\n    >\n      <ProductNameInput form={form} placeholder={\"Give a name to the new item ...\"} />\n    </Form>\n  );\n};\n\nexport const ProductImageUploadButton = ({ product, ...props }) => {\n  if (!product || !product.slug) return null;\n\n  return (\n    <ImgUploadButton\n      multiple={true}\n      onCreate={(imgsArray) => {\n        imgsArray = imgsArray.filter((img) => img && img.slug);\n\n        productServices\n          .patch(product.slug, { images: [...product.images, ...imgsArray.map((img) => img.slug)] })\n          .then((data) => {\n            if (props.onCreateSuccess) props.onCreateSuccess(data);\n          })\n          .catch((err) => {\n            if (props.onCreateError) props.onCreateError(err);\n          });\n      }}\n    />\n  );\n};\n\nexport const ProductImageAltTextInput = ({ image, ...props }) => {\n  const form = useForm({ alt_text: image.alt_text || \"\" });\n\n  return (\n    <FormProvider value={form}>\n      <ImageAltTextInput\n        required\n        image={image}\n        onSuccess={props.onSuccess}\n        onError={props.onError}\n        placeholder=\"Add an alternative text ...\"\n      />\n    </FormProvider>\n  );\n};\n\nProductImageAltTextInput.propTypes = {\n  image: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n  }),\n\n  onUpdate: PropTypes.func,\n  onError: PropTypes.func,\n};\n\nexport const ProductCoverUploadButton = ({ children, product, ...props }) => {\n  if (!product || !product.slug) return null;\n\n  const handleCoverCreate = ({ slug }) => {\n    productServices\n      .patch(product.slug, { cover: slug })\n      .then((data) => {\n        if (props.onCreateSuccess) props.onCreateSuccess(data);\n      })\n      .catch((err) => {\n        if (props.onCreateError) props.onCreateError(err);\n      });\n  };\n  const handleCoverUpdate = (imgData) => {\n    if (props.onUpdateSuccess) props.onUpdateSuccess(imgData);\n  };\n\n  return (\n    <ImgUploadButton\n      slug={product.cover_data ? product.cover_data.slug : null}\n      onCreate={handleCoverCreate}\n      onUpdate={handleCoverUpdate}\n      className=\"product-cover-upload-button\"\n    >\n      {children}\n    </ImgUploadButton>\n  );\n};\n\nProductCoverUploadButton.propTypes = {\n  children: PropTypes.any.isRequired,\n  product: PropTypes.shape({ slug: PropTypes.string.isRequired }).isRequired,\n  onCreateSuccess: PropTypes.func,\n  onCreateError: PropTypes.func,\n  onUpdateSuccess: PropTypes.func,\n  onUpdateError: PropTypes.func,\n};\n","import React from \"react\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\n// import { debounce } from \"@miq/utils\";\n\n// import { SharedDataCtx } from \"@miq/contexts\";\nimport { useForm } from \"@miq/form\";\nimport { AdminView } from \"@miq/adminjs\";\nimport { Button, ImgDeleteIconButton, ToastCtx, ImgSquare, Img } from \"@miq/components\";\nimport {\n  ProductDescriptionInput,\n  ProductCoverUploadButton,\n  ProductTable,\n  ProductUpdateForm,\n  ProductImageUploadButton,\n  ProductCreateForm,\n  ProductImageAltTextInput,\n} from \"./components\";\nimport { productServices } from \"./utils\";\n\nconst ProductTabDisplay = (props) => {\n  const { product, form, tab, onProductUpdate } = props;\n\n  switch (tab) {\n    case \"price\":\n      return <AdminView.Section title={form.values.name} text=\"Upload your item's price\"></AdminView.Section>;\n\n    case \"imgs\":\n      const { cover_data, cover } = product;\n      return (\n        <AdminView.Section\n          title={form.values.name}\n          text=\"Upload your item's images\"\n          actions={<ProductImageUploadButton product={product} onCreateSuccess={(data) => onProductUpdate(data)} />}\n          className=\"product-item-images\"\n        >\n          {cover && (\n            <div className=\"img-item mb-1\">\n              <Img {...cover_data} className=\"product-cover me-1\" />\n\n              <div className=\"flex-1\">\n                <div className=\"mb-1\">\n                  <ProductImageAltTextInput\n                    image={cover_data}\n                    onSuccess={({ isUpdated, ...imgData }) =>\n                      onProductUpdate({ ...product, cover_data: imgData, cover: imgData.slug })\n                    }\n                  />\n                </div>\n                <ImgDeleteIconButton\n                  label=\"Delete cover\"\n                  className=\"btn-danger-3\"\n                  slug={cover_data.slug}\n                  onSuccess={() => onProductUpdate({ ...product, cover_data: null, cover: null })}\n                />\n              </div>\n            </div>\n          )}\n\n          {product.images_data.map((img) => (\n            <div className=\"img-item mb-1\" key={img.slug}>\n              <Img {...img} className=\"product-img\" />\n              <div className=\"flex-1\">\n                <div className=\"mb-1\">\n                  <ProductImageAltTextInput image={img} />\n                </div>\n\n                <ImgDeleteIconButton\n                  slug={img.slug}\n                  className=\"btn-danger-3\"\n                  onSuccess={() =>\n                    onProductUpdate({\n                      ...product,\n                      images_data: product.images_data.filter((i) => i.slug !== img.slug),\n                      images: product.images.filter((i) => i !== img.slug),\n                    })\n                  }\n                />\n              </div>\n            </div>\n          ))}\n\n          <div className=\"d-grid grid-2 grid-md-3 grid-lg-4 mt-4\">\n            {product.images_data.map((img) => (\n              <div className=\"img-grid-item\" key={img.slug}>\n                <div className=\"img-grid-item-content\">\n                  <ImgSquare {...img} className=\"product-img\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </AdminView.Section>\n      );\n\n    case \"desc\":\n      return (\n        <AdminView.Section title={form.values.name} text=\"Update your item's description\">\n          <ProductDescriptionInput\n            product={product}\n            form={form}\n            onSuccess={(data) => {\n              // setProduct(data);\n              // toast.success({ message: \"Item updated.\" });\n            }}\n            onError={(err) => {\n              form.handleError(err);\n              // toast.error({ message: \"Could not update item.\" });\n            }}\n          />\n        </AdminView.Section>\n      );\n\n    case \"vars\":\n      return <AdminView.Section title={form.values.name} text=\"Upload your item's variants\"></AdminView.Section>;\n\n    default:\n      return (\n        <AdminView.Section title={form.values.name} text={`/${product.slug_public}`}>\n          <div className=\"d-flex\">\n            <div className=\"me-1\">\n              <ProductCoverUploadButton\n                product={product}\n                onCreateSuccess={(data) => {\n                  onProductUpdate(data);\n                }}\n                onCreateError={() => {}}\n                onUpdateSuccess={(imgData) => {\n                  onProductUpdate({ ...product, cover: imgData.slug, cover_data: imgData });\n                }}\n                onUpdateError={() => {}}\n              >\n                <ImgSquare {...product.cover_data} className=\"product-cover\" />\n              </ProductCoverUploadButton>\n            </div>\n            <div className=\"flex-1\">\n              <ProductUpdateForm.NameInput\n                product={product}\n                form={form}\n                onSuccess={(data) => {\n                  // setProduct(data);\n                  // toast.success({ message: \"Item updated.\" });\n                }}\n                onError={(err) => {\n                  form.handleError(err);\n                  // toast.error({ message: \"Could not update item.\" });\n                }}\n              />\n            </div>\n          </div>\n        </AdminView.Section>\n      );\n  }\n};\n\nconst ProductItem = ({ product, ...props }) => {\n  const [tab, setTab] = useState(\"product\");\n  const form = useForm({\n    name: product.name || \"\",\n    description: product.description || \"\",\n    slug_public: product.slug_public || \"\",\n    is_published: product.page.is_published || false,\n    title: \"\",\n  });\n\n  if (!product || !product.slug) return null;\n\n  return (\n    <div className=\"product-item border-1 rounded\">\n      <ProductUpdateForm form={form} product={product}>\n        <div className=\"d-flex align-items-center justify-content-between p-1 border-bottom\">\n          <div className=\"product-item-nav\">\n            <Button onClick={() => setTab(\"product\")}>Info</Button>\n            <Button onClick={() => setTab(\"desc\")}>Description</Button>\n            <Button onClick={() => setTab(\"price\")}>Price</Button>\n            <Button onClick={() => setTab(\"vars\")}>Variants</Button>\n            <Button onClick={() => setTab(\"imgs\")}>Images</Button>\n          </div>\n\n          <div className=\"\">\n            {form.values.is_published ? (\n              <span className=\"text-green-600\">Published</span>\n            ) : (\n              <span className=\"text-muted\">Draft</span>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-1\">\n          <ProductTabDisplay {...props} product={product} tab={tab} form={form} />\n        </div>\n      </ProductUpdateForm>\n    </div>\n  );\n};\n\nconst ProductList = (props) => {\n  const { data = { results: [] }, ...rest } = props;\n  return (\n    <div className=\"product-list\">\n      {data.results.map((item) => (\n        <ProductItem {...rest} product={item} key={item.slug} />\n      ))}\n    </div>\n  );\n};\n\nexport default function ProductListView(props) {\n  const [isAdding, setAdding] = useState(false);\n  const [data, setData] = useState({ results: [] });\n  const toasts = useContext(ToastCtx);\n\n  const { search } = props.location;\n  const getProducts = useCallback((...params) => productServices.list(...params), []);\n  //   const push = useRef(debounce((url) => props.history.push(url), 300));\n\n  useEffect(() => {\n    let params = new URLSearchParams(search);\n    if (![...params.values()].filter((i) => i).length) {\n      params = null;\n    }\n\n    getProducts(params)\n      .then((data) => {\n        setData(data);\n      })\n      .catch((err) => {\n        toasts.error({ message: \"Something went wrong\" });\n      });\n  }, [getProducts, search, toasts]);\n\n  const handleProductUpdate = (prodData) => {\n    setData({\n      ...data,\n      results: data.results.map((i) => {\n        if (i.slug === prodData.slug) return prodData;\n        return i;\n      }),\n    });\n  };\n\n  return (\n    <AdminView\n      title=\"Products\"\n      actions={\n        <Button onClick={() => setAdding(!isAdding)} className=\"btn-primary\">\n          Add product\n        </Button>\n      }\n    >\n      {isAdding && (\n        <AdminView.Section title=\"Add a new product\">\n          <ProductCreateForm\n            className=\"mb-3\"\n            onSuccess={(newData) => {\n              setAdding(false);\n              return setData({ ...data, results: [newData, ...data.results] });\n            }}\n          />\n        </AdminView.Section>\n      )}\n\n      <ProductList data={data} setData={setData} toasts={toasts} onProductUpdate={handleProductUpdate} />\n      <ProductTable data={data} setData={setData} toasts={toasts} />\n    </AdminView>\n  );\n}\n"],"sourceRoot":""}