{"version":3,"file":"static/js/615.0cdf62a9.chunk.js","mappings":"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","sources":["../../../../shopy/shopy-storejs/src/Category/UpdateView.tsx","../../../../shopy/shopy-storejs/src/Category/forms.tsx","../../../../shopy/shopy-storejs/src/Category/models.tsx"],"sourcesContent":["// import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Staff from '@miq/staffjs';\nimport Form, { useForm, MetaTitleField, MetaSlugField, MetaDescriptionField } from '@miq/formjs';\nimport { Response } from '@miq/utiljs';\nimport { useRequest } from '@miq/hookjs';\nimport { Icons } from '@miq/componentjs';\n\nimport { PublishButton, UnPublishButton } from '../components';\nimport { getImageComponent } from '../Product/UpdateViewTabs';\nimport { StaffImgUpdateButton, StaffImgAddButton, StaffImgViewSelect, StaffImgDeleteButton } from '@miq/staffjs/';\nimport { StaffCategory } from './models';\nimport { CategoryForm, CategoryUpdateForm } from './forms';\nimport { CategoryType } from '../types';\n\nconst mapData2Values = (data: CategoryType = {}): CategoryType => {\n  return {\n    name: data.name || '',\n    description: data.description || '',\n    is_published: data.is_published || false,\n\n    meta_title: data.meta_title || '',\n    meta_slug: data?.meta_slug || '',\n    meta_description: data?.meta_description || '',\n  };\n};\n\nexport default function CategoryStaffUpdateView() {\n  const { catSlug } = useParams();\n  const form = useForm<CategoryType>(mapData2Values());\n\n  const { res, updateData } = useRequest(() => StaffCategory({ slug: catSlug }).retrieve(), {\n    refreshDeps: [catSlug],\n    onSuccess: ({ data }) => form.setValues(mapData2Values(data)),\n    onError: ({ response }) => {},\n  });\n\n  const r = new Response(res);\n  if (!r.isSuccess) return null;\n\n  let instance = StaffCategory(r.data);\n\n  const handleSuccess = ({ data }: any) => updateData(data);\n\n  const { errors } = form;\n\n  return (\n    <Staff.View\n      title=\"Modifier cette catégorie\"\n      back=\"../\"\n      requiredPerms={['store.change_category']}\n      className=\"cat-staff-update-view\"\n    >\n      <div className=\"d-grid grid-md-4\">\n        <div className=\"p-md-1\">\n          <div className=\"p-1\">\n            <CoverCard {...{ instance, updateData }} />\n          </div>\n        </div>\n\n        <div className=\"span-md-3 span-lg-2\">\n          <Staff.Section title=\"Details\">\n            <CategoryUpdateForm\n              context={form}\n              instance={instance}\n              fields={['name', 'description']}\n              onSuccess={handleSuccess}\n            >\n              <CategoryForm.NameField\n                label=\"Nom de la catégorie\"\n                error={errors.name}\n                text={`Ajoutez un nom qui décrit cette catégorie.\\nNous recommandons 65 caractères au max.`}\n              />\n              <CategoryForm.DescriptionField\n                label=\"Description\"\n                error={errors.description}\n                text={`Décrivez cet catégorie.`}\n              />\n              <div className=\"d-flex justify-content-center\">\n                <Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3 min-w-25\" />\n              </div>\n            </CategoryUpdateForm>\n          </Staff.Section>\n\n          <Staff.Section title=\"SEO\">\n            <CategoryUpdateForm\n              context={form}\n              instance={instance}\n              fields={['meta_title', 'meta_description', 'meta_slug']}\n              onSuccess={handleSuccess}\n            >\n              <MetaTitleField error={errors.meta_title} />\n              <MetaSlugField error={errors.meta_slug} />\n              <MetaDescriptionField error={errors.meta_description} />\n\n              <div className=\"d-flex justify-content-center\">\n                <Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3 min-w-25\" />\n              </div>\n            </CategoryUpdateForm>\n          </Staff.Section>\n        </div>\n\n        <div className=\"span-lg-1\">\n          <div style={{ top: 0, position: 'sticky' }}>\n            {instance.is_published ? (\n              <UnPublishButton instance={instance} onSuccess={({ data }: any) => updateData(data)}>\n                Dépublier cette catégorie\n              </UnPublishButton>\n            ) : (\n              <PublishButton\n                instance={instance}\n                onSuccess={({ data }: any) => updateData(data)}\n                onError={(err: any) => form.handleError(err)}\n              >\n                Publier cette catégorie\n              </PublishButton>\n            )}\n          </div>\n        </div>\n      </div>\n    </Staff.View>\n  );\n}\n\nconst CoverCard = (props: { instance: ReturnType<typeof StaffCategory>; updateData: (r: any) => void }) => {\n  const { updateData, instance } = props;\n  const form = useForm({ view: 'src' });\n\n  const img = Staff.Img(instance?.cover_data || {});\n\n  if (!img?.slug)\n    return (\n      <div className=\"d-flex align-items-center justify-content-center flex-column text-center border-1 rounded p-3\">\n        <StaffImgAddButton\n          onSuccess={({ data }: any) => {\n            instance\n              .update({ cover: data.slug })\n              .then(({ data }: any) => updateData(data))\n              .catch((err: any) => {});\n          }}\n          label=\"Ajouter une image\"\n          className=\"btn-primary-3 btn-md\"\n        />\n      </div>\n    );\n\n  const Image = getImageComponent(form.values.view);\n  return (\n    <Form context={form} className=\"p-cover-update-form\">\n      <Staff.Section\n        border\n        title={\n          <StaffImgDeleteButton\n            onSuccess={() => updateData({ cover_data: null, cover: null })}\n            instance={img}\n            className=\"btn-danger-3\"\n          >\n            <Icons.Trash />\n          </StaffImgDeleteButton>\n        }\n        actions={<StaffImgViewSelect required name=\"view\" />}\n        className=\"p-image-card\"\n      >\n        <StaffImgUpdateButton\n          instance={img}\n          field={form.values.view}\n          onSuccess={({ data }: any) => updateData({ cover: data.slug, cover_data: data })}\n        >\n          <Image {...img} />\n        </StaffImgUpdateButton>\n      </Staff.Section>\n    </Form>\n  );\n};\n","import Form, { DescriptionField, NameField, TextFieldProps, useForm } from '@miq/formjs';\nimport { FormProps, IFormCallbackProps, IFormUpdateProps } from '@miq/formjs/src/Form';\nimport { isRequired as isR } from '@miq/utiljs';\nimport React from 'react';\nimport { StaffCategory } from './models';\n\nexport const CategoryCreateForm: React.FC<IFormCallbackProps> = (props) => {\n  const form = useForm({ name: '' });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    return StaffCategory()\n      .create(form.values)\n      .then((res: any) => props?.onSuccess?.(res))\n      .catch((err: any) => {\n        form.handleError(err);\n        props?.onError?.(err);\n      });\n  };\n  return (\n    <CategoryForm context={form} onSubmit={handleSubmit}>\n      <div className=\"\">\n        <CategoryForm.NameField error={form.errors.name} />\n      </div>\n\n      <div className=\"my-3\">\n        <Form.Submit value={'Save category'} className=\"btn btn-primary\" />\n      </div>\n    </CategoryForm>\n  );\n};\n\ninterface ICategoryUpdateFormProps extends IFormUpdateProps {\n  instance: ReturnType<typeof StaffCategory>;\n  onWillSubmit?: () => void;\n  fields: string[];\n}\n\nexport const CategoryUpdateForm: React.FC<ICategoryUpdateFormProps> = ({\n  instance = isR('Category instance'),\n  fields,\n  ...props\n}) => {\n  const { onSuccess, onError, onWillSubmit, ...rest } = props;\n  const { context } = rest;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onWillSubmit?.();\n\n    const fd: any = {};\n    fields.forEach((field) => {\n      const value = context.values[field];\n      if (value == null) return;\n      fd[field] = value;\n    });\n\n    return instance\n      .update(fd)\n      .then((res: any) => onSuccess?.(res))\n      .catch((err: any) => {\n        if (onError) return onError(err);\n        return context?.handleError?.(err);\n      });\n  };\n  return <CategoryForm {...rest} onSubmit={handleSubmit} />;\n};\n\nexport const CategoryForm = (props: FormProps) => <Form {...props} />;\n\nCategoryForm.NameField = (props: TextFieldProps) => (\n  <NameField placeholder=\"Entrez le nom de la catégorie ...\" {...props} required />\n);\n\nCategoryForm.DescriptionField = (props: TextFieldProps) => <DescriptionField {...props} />;\n","import { StaffModel, StaffService } from '@miq/staffjs';\nimport { CategoryType } from '../types';\n\n\nclass StaffCategoryService extends StaffService<CategoryType> {\n  publish() {\n    return this.update({ is_published: true });\n  }\n\n  unpublish() {\n    return this.update({ is_published: true });\n  }\n}\n\nexport const StaffCategory = (data: CategoryType = {}) => {\n  let { dt_published } = data;\n  if (dt_published) dt_published = new Date(dt_published);\n\n  return StaffModel<CategoryType, StaffCategoryService>(\n    { ...data, dt_published },\n    'categories',\n    StaffCategoryService\n  );\n};\n"],"names":["mapData2Values","data","name","description","is_published","meta_title","meta_slug","meta_description","CategoryStaffUpdateView","catSlug","useParams","form","useForm","useRequest","StaffCategory","slug","retrieve","refreshDeps","onSuccess","setValues","onError","response","res","updateData","r","Response","isSuccess","instance","handleSuccess","errors","title","back","requiredPerms","className","CoverCard","context","fields","label","error","text","value","style","top","position","err","handleError","props","view","img","Staff","cover_data","update","cover","then","catch","Image","getImageComponent","values","border","actions","required","field","CategoryCreateForm","CategoryForm","onSubmit","e","preventDefault","create","NameField","CategoryUpdateForm","isR","onWillSubmit","rest","fd","forEach","placeholder","DescriptionField","StaffCategoryService","this","StaffService","dt_published","Date","StaffModel"],"sourceRoot":""}