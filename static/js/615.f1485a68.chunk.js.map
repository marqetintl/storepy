{"version":3,"file":"static/js/615.f1485a68.chunk.js","mappings":"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","sources":["../../../../shopy/shopy-storejs/src/Category/UpdateView.tsx","../../../../shopy/shopy-storejs/src/Category/forms.tsx","../../../../shopy/shopy-storejs/src/Category/models.tsx"],"sourcesContent":["// import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Staff from '@miq/staffjs';\nimport Form, { useForm, MetaTitleField, MetaSlugField, MetaDescriptionField } from '@miq/formjs';\nimport { Response } from '@miq/utiljs';\nimport { useRequest } from '@miq/hookjs';\nimport { Icons } from '@miq/componentjs';\n\nimport { PublishButton, UnPublishButton } from '../components';\nimport { getImageComponent } from '../Product/UpdateViewTabs';\nimport { StaffImgUpdateButton, StaffImgAddButton, StaffImgViewSelect, StaffImgDeleteButton } from '@miq/staffjs/';\nimport { StaffCategory } from './models';\nimport { CategoryUpdateForm } from './forms';\nimport { TCategory } from '../types';\n\nconst mapData2Values = (data: TCategory = {}): TCategory => {\n  return {\n    name: data.name || '',\n    description: data.description || '',\n    is_published: data.is_published || false,\n\n    meta_title: data.meta_title || '',\n    meta_slug: data?.meta_slug || '',\n    meta_description: data?.meta_description || '',\n  };\n};\n\nexport default function CategoryStaffUpdateView() {\n  const { catSlug } = useParams();\n  const form = useForm<TCategory>(mapData2Values());\n\n  const { res, updateData } = useRequest(() => StaffCategory({ slug: catSlug }).retrieve(), {\n    refreshDeps: [catSlug],\n    onSuccess: ({ data }) => form.setValues(mapData2Values(data)),\n    onError: ({ response }) => {},\n  });\n\n  const r = new Response(res);\n  if (!r.isSuccess) return null;\n\n  let instance = StaffCategory(r.data);\n\n  const handleSuccess = ({ data }: any) => updateData(data);\n\n  const { errors } = form;\n\n  return (\n    <Staff.View\n      title=\"Modifier cette catégorie\"\n      back=\"../\"\n      requiredPerms={['store.change_category']}\n      className=\"cat-staff-update-view\"\n    >\n      <div className=\"d-grid grid-md-4\">\n        <div className=\"p-md-1\">\n          <div className=\"p-1\">\n            <CoverCard {...{ instance, updateData }} />\n          </div>\n        </div>\n\n        <div className=\"span-md-3 span-lg-2\">\n          <Staff.Section title=\"Details\">\n            <CategoryUpdateForm\n              context={form}\n              instance={instance}\n              fields={['name', 'description']}\n              onSuccess={handleSuccess}\n            >\n              <div className=\"d-flex justify-content-center\">\n                <Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3 min-w-25\" />\n              </div>\n            </CategoryUpdateForm>\n          </Staff.Section>\n\n          <Staff.Section title=\"SEO\">\n            <CategoryUpdateForm\n              context={form}\n              instance={instance}\n              fields={['meta_title', 'meta_description', 'meta_slug']}\n              onSuccess={handleSuccess}\n            >\n              <MetaTitleField error={errors.meta_title} />\n              <MetaSlugField error={errors.meta_slug} />\n              <MetaDescriptionField error={errors.meta_description} />\n\n              <div className=\"d-flex justify-content-center\">\n                <Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3 min-w-25\" />\n              </div>\n            </CategoryUpdateForm>\n          </Staff.Section>\n        </div>\n\n        <div className=\"span-lg-1\">\n          <div style={{ top: 0, position: 'sticky' }}>\n            {instance.is_published ? (\n              <UnPublishButton instance={instance} onSuccess={({ data }: any) => updateData(data)}>\n                Dépublier cette catégorie\n              </UnPublishButton>\n            ) : (\n              <PublishButton\n                instance={instance}\n                onSuccess={({ data }: any) => updateData(data)}\n                onError={(err: any) => form.handleError(err)}\n              >\n                Publier cette catégorie\n              </PublishButton>\n            )}\n          </div>\n        </div>\n      </div>\n    </Staff.View>\n  );\n}\n\nconst CoverCard = (props: { instance: ReturnType<typeof StaffCategory>; updateData: (r: any) => void }) => {\n  const { updateData, instance } = props;\n  const form = useForm({ view: 'src' });\n\n  const img = Staff.Img(instance?.cover_data || {});\n\n  if (!img?.slug)\n    return (\n      <div className=\"d-flex align-items-center justify-content-center flex-column text-center border-1 rounded p-3\">\n        <StaffImgAddButton\n          onSuccess={({ data }: any) => {\n            instance\n              .update({ cover: data.slug })\n              .then(({ data }: any) => updateData(data))\n              .catch((err: any) => {});\n          }}\n          label=\"Ajouter une image\"\n          className=\"btn-primary-3 btn-md\"\n        />\n      </div>\n    );\n\n  const Image = getImageComponent(form.values.view);\n  return (\n    <Form context={form} className=\"p-cover-update-form\">\n      <Staff.Section\n        border\n        title={\n          <StaffImgDeleteButton\n            onSuccess={() => updateData({ cover_data: null, cover: null })}\n            instance={img}\n            className=\"btn-danger-3\"\n          >\n            <Icons.Trash />\n          </StaffImgDeleteButton>\n        }\n        actions={<StaffImgViewSelect required name=\"view\" />}\n        className=\"p-image-card\"\n      >\n        <StaffImgUpdateButton\n          instance={img}\n          field={form.values.view}\n          onSuccess={({ data }: any) => updateData({ cover: data.slug, cover_data: data })}\n        >\n          <Image {...img} />\n        </StaffImgUpdateButton>\n      </Staff.Section>\n    </Form>\n  );\n};\n","import Form, { DescriptionField, NameField, TextFieldProps, useForm } from '@miq/formjs';\nimport { FormProps, IFormCallbackProps, IFormUpdateProps } from '@miq/formjs/src/Form';\nimport { isRequired as isR } from '@miq/utiljs';\nimport React from 'react';\nimport { StaffCategory } from './models';\n\nexport const CategoryCreateForm: React.FC<IFormCallbackProps> = (props) => {\n  const form = useForm({ name: '' });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    return StaffCategory()\n      .create(form.values)\n      .then((res: any) => props?.onSuccess?.(res))\n      .catch((err: any) => {\n        form.handleError(err);\n        props?.onError?.(err);\n      });\n  };\n  return (\n    <CategoryForm context={form} onSubmit={handleSubmit}>\n      <div className=\"\">\n        <CategoryForm.NameField error={form.errors.name} />\n      </div>\n\n      <div className=\"my-3\">\n        <Form.Submit value={'Save category'} className=\"btn btn-primary\" />\n      </div>\n    </CategoryForm>\n  );\n};\n\ninterface ICategoryUpdateFormProps extends Omit<IFormUpdateProps, 'instance'> {\n  instance: ReturnType<typeof StaffCategory>;\n  onWillSubmit?: () => void;\n  fields: string[];\n}\n\nexport const CategoryUpdateForm: React.FC<ICategoryUpdateFormProps> = ({\n  instance = isR('Category instance'),\n  fields = [],\n  children,\n  ...props\n}) => {\n  const { onSuccess, onError, onWillSubmit, ...rest } = props;\n  const { context } = rest;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onWillSubmit?.();\n\n    const fd: any = {};\n    fields.forEach((field) => {\n      const value = context.values[field];\n      if (value == null) return;\n      fd[field] = value;\n    });\n\n    return instance\n      .update(fd)\n      .then((res: any) => onSuccess?.(res))\n      .catch((err: any) => {\n        if (onError) return onError(err);\n        return context?.handleError?.(err);\n      });\n  };\n  return (\n    <CategoryForm {...rest} onSubmit={handleSubmit}>\n      {fields.includes('name') && (\n        <CategoryForm.NameField\n          label=\"Nom de la catégorie\"\n          error={context?.errors?.name}\n          text={`Ajoutez un nom qui décrit cette catégorie.\\nNous recommandons 65 caractères au max.`}\n        />\n      )}\n\n      {fields.includes('description') && (\n        <CategoryForm.DescriptionField\n          label=\"Description\"\n          error={context?.errors?.description}\n          text={`Décrivez cet catégorie.`}\n        />\n      )}\n\n      {fields.includes('position') && (\n        <CategoryForm.PositionField\n          label=\"Position\"\n          error={context?.errors?.position}\n          // text={`Décrivez cet ca`}\n        />\n      )}\n      {children}\n    </CategoryForm>\n  );\n};\n\nexport const CategoryForm = (props: FormProps) => <Form {...props} />;\n\nCategoryForm.NameField = (props: TextFieldProps) => (\n  <NameField placeholder=\"Entrez le nom de la catégorie ...\" {...props} required />\n);\n\nCategoryForm.DescriptionField = (props: TextFieldProps) => <DescriptionField {...props} />;\nCategoryForm.PositionField = ({ label, error, ...props }: TextFieldProps) => (\n  <Form.Field {...{ label, error }}>\n    <Form.Text name=\"position\" type=\"number\" min={0} {...props} />\n  </Form.Field>\n);\n","import { StaffModel, StaffService } from '@miq/staffjs';\nimport { TCategory } from '../types';\n\nclass StaffCategoryService extends StaffService<TCategory> {\n  publish() {\n    return this.update({ is_published: true });\n  }\n\n  unpublish() {\n    return this.update({ is_published: false });\n  }\n}\n\nexport const StaffCategory = (data: TCategory = {}) => {\n  let { dt_published } = data;\n  if (dt_published) dt_published = new Date(dt_published);\n\n  return StaffModel<TCategory, StaffCategoryService>({ ...data, dt_published }, 'categories', StaffCategoryService);\n};\n"],"names":["mapData2Values","data","name","description","is_published","meta_title","meta_slug","meta_description","CategoryStaffUpdateView","catSlug","useParams","form","useForm","useRequest","StaffCategory","slug","retrieve","refreshDeps","onSuccess","setValues","onError","response","res","updateData","r","Response","isSuccess","instance","handleSuccess","errors","title","back","requiredPerms","className","CoverCard","context","fields","value","error","style","top","position","err","handleError","props","view","img","Staff","cover_data","update","cover","then","catch","label","Image","getImageComponent","values","border","actions","required","field","CategoryCreateForm","CategoryForm","onSubmit","e","preventDefault","create","NameField","CategoryUpdateForm","isR","children","onWillSubmit","rest","fd","forEach","includes","text","DescriptionField","PositionField","placeholder","type","min","StaffCategoryService","this","StaffService","dt_published","Date","StaffModel"],"sourceRoot":""}