{"version":3,"sources":["shop/product/components.jsx","shop/product/AddView.jsx"],"names":["ProductNameInput","onSuccess","onError","props","product","placeholder","form","rest","Label","value","className","TextInput","required","name","onSave","slug","productServices","patch","then","data","catch","err","error","errors","maxLength","ProductUpdateForm","children","context","NameInput","ProductImageUploadButton","multiple","onCreate","imgsArray","filter","img","images","map","onCreateSuccess","onCreateError","ProductImageAltTextInput","image","useForm","alt_text","SupplierData","supplier_name","supplier_item_id","supplier_item_category","supplier_item_cost","supplier_item_cost_currency","href","supplier_item_url","target","rel","ExternalUrlForm","useState","isLoading","setLoading","url","onSubmit","e","preventDefault","getSheinProductData","values","setValue","console","log","type","disabled","Submit","StaffProductAddView","title","back","TabNavLinks","urls","exact","to","addForwardSlash","match","label","productForm","post","history","push","replace","handleError","Section"],"mappings":"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","file":"static/js/11.10ae3392.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Form, { useForm, FormProvider } from \"@miq/form\";\nimport { ImageAltTextInput } from \"@miq/adminjs\";\nimport { ImgUploadButton } from \"@miq/components\";\nimport { productServices } from \"./utils\";\n\n//\n// ========================= FORM COMPONENTS ===================================================================\n//\n\nexport const ProductCategoryInput = ({ onSuccess, onError, ...props }) => {\n  const { placeholder = \"Give a name to the item\", form } = props;\n  if (!form) return null;\n\n  return (\n    <>\n      <Form.Label value=\"Name\" className=\"mb-1\" />\n      <Form.TextInput {...props} name=\"name\" error={form.errors.name} placeholder={placeholder} maxLength={99} />\n    </>\n  );\n};\n\nexport const ProductNameInput = ({ onSuccess, onError, ...props }) => {\n  const { product, placeholder = \"Give a name to the item\", form, ...rest } = props;\n\n  if (!form) return null;\n\n  return (\n    <>\n      <Form.Label value=\"Name\" className=\"mb-1\" />\n      <Form.TextInput\n        {...rest}\n        required\n        name=\"name\"\n        onSave={({ value }) => {\n          if (!value || !product || !product.slug) return;\n\n          return productServices\n            .patch(product.slug, { name: value }, { name: product.name })\n            .then((data) => {\n              if (onSuccess) return onSuccess(data);\n            })\n            .catch((err) => {\n              if (onError) return onError(err);\n            });\n        }}\n        error={form.errors.name}\n        placeholder={placeholder}\n        maxLength={99}\n      />\n    </>\n  );\n};\n\nexport const ProductUpdateForm = ({ children, form, ...props }) => {\n  if (!form) return null;\n  return (\n    <Form {...props} context={form}>\n      {children}\n    </Form>\n  );\n};\n\nProductUpdateForm.NameInput = ProductNameInput;\n\nexport const ProductImageUploadButton = ({ product, ...props }) => {\n  if (!product || !product.slug) return null;\n\n  return (\n    <ImgUploadButton\n      multiple={true}\n      className=\"btn-primary-3\"\n      onCreate={(imgsArray) => {\n        imgsArray = imgsArray.filter((img) => img && img.slug);\n        return productServices\n          .patch(product.slug, { images: [...product.images, ...imgsArray.map((img) => img.slug)] })\n          .then((data) => {\n            if (props.onCreateSuccess) props.onCreateSuccess(data);\n          })\n          .catch((err) => {\n            if (props.onCreateError) props.onCreateError(err);\n          });\n      }}\n    />\n  );\n};\n\nexport const ProductImageAltTextInput = ({ image, ...props }) => {\n  const form = useForm({ alt_text: image?.alt_text || \"\" });\n\n  if (!image || !image.slug) return null;\n\n  return (\n    <FormProvider value={form} className={props.className}>\n      <ImageAltTextInput\n        required\n        image={image}\n        onSuccess={props.onSuccess}\n        onError={props.onError}\n        placeholder=\"Add an alternative text ...\"\n      />\n    </FormProvider>\n  );\n};\n\nProductImageAltTextInput.propTypes = {\n  image: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n  }),\n\n  onUpdate: PropTypes.func,\n  onError: PropTypes.func,\n};\n\nexport const ProductCoverUploadButton = ({ children, product, ...props }) => {\n  if (!product || !product.slug) return null;\n\n  const handleCoverCreate = ({ slug }) => {\n    productServices\n      .patch(product.slug, { cover: slug })\n      .then((data) => {\n        if (props.onCreateSuccess) props.onCreateSuccess(data);\n      })\n      .catch((err) => {\n        if (props.onCreateError) props.onCreateError(err);\n      });\n  };\n  const handleCoverUpdate = (imgData) => {\n    if (props.onUpdateSuccess) props.onUpdateSuccess(imgData);\n  };\n\n  return (\n    <ImgUploadButton\n      slug={product.cover_data ? product.cover_data.slug : null}\n      onCreate={handleCoverCreate}\n      onUpdate={handleCoverUpdate}\n      className=\"product-cover-upload-button\"\n    >\n      {children}\n    </ImgUploadButton>\n  );\n};\n\nProductCoverUploadButton.propTypes = {\n  children: PropTypes.any.isRequired,\n  product: PropTypes.shape({ slug: PropTypes.string.isRequired }).isRequired,\n  onCreateSuccess: PropTypes.func,\n  onCreateError: PropTypes.func,\n  onUpdateSuccess: PropTypes.func,\n  onUpdateError: PropTypes.func,\n};\n\nexport const SupplierData = ({ product, ...props }) => {\n  if (!product) return null;\n\n  return (\n    <div className=\"product-supplier-data\">\n      <ul>\n        <li>\n          <span className=\"\">Supplier</span>\n          <span className=\"\">{product.supplier_name}</span>\n        </li>\n        <li>\n          <span className=\"\">Item id</span>\n          <span className=\"\">{product.supplier_item_id}</span>\n        </li>\n        <li>\n          <span className=\"\">Category</span>\n          <span className=\"\">{product.supplier_item_category}</span>\n        </li>\n\n        <li>\n          <span className=\"\">Item cost</span>\n          <span className=\"\">\n            {product.supplier_item_cost} ({product.supplier_item_cost_currency})\n          </span>\n        </li>\n        <li>\n          <a href={product.supplier_item_url} className=\"text-underline\" target=\"_blank\" rel=\"noopener noreferrer\">\n            View supplier page\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import { useState } from \"react\";\n// import { Switch, Route } from \"react-router-dom\";\nimport { AdminView } from \"@miq/adminjs\";\n\nimport Form, { useForm } from \"@miq/form\";\nimport { addForwardSlash } from \"@miq/utils\";\n\nimport { productServices } from \"./utils\";\nimport { ProductNameInput } from \"./components\";\n\nconst ExternalUrlForm = (props) => {\n  // const [data, setData] = useState({});\n  const [isLoading, setLoading] = useState(false);\n\n  const form = useForm({ url: \"\" });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    productServices\n      .getSheinProductData({ url: form.values.url })\n      .then((data) => {\n        setLoading(false);\n        form.setValue(\"url\", \"\");\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n\n  return (\n    <Form context={form} onSubmit={handleSubmit} className=\"my-3\">\n      {isLoading && <div className=\"my-3\">Getting product data. Please wait ...</div>}\n      <div className=\"d-flex flex-column flex-md-row\">\n        <Form.TextInput\n          required\n          name=\"url\"\n          type=\"url\"\n          placeholder=\"Add source url ...\"\n          className=\"me-1\"\n          disabled={isLoading}\n        />\n        <Form.Submit value=\"Get data\" className=\"btn btn-primary-3\" disabled={isLoading} />\n      </div>\n    </Form>\n  );\n};\n\nexport default function StaffProductAddView(props) {\n  const form = useForm({ name: \"\", img: \"\" });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    return productServices\n      .post({ name: form.values.name })\n      .then(({ slug }) => {\n        if (!slug) return;\n\n        props.history.push(`${props.match.url.replace(\"new/\", `${slug}/`)}`);\n      })\n      .catch((err) => {\n        form.handleError(err);\n      });\n  };\n\n  return (\n    <AdminView title=\"Add a new product\" back={props?.back} className=\"product-add-view\">\n      <AdminView.TabNavLinks\n        urls={[\n          { exact: true, to: addForwardSlash(props.match.url), label: \"Product info\" },\n          { to: `${addForwardSlash(props.match.url)}source/`, label: \"Add from source\" },\n        ]}\n        className=\"my-2\"\n      />\n\n      <ExternalUrlForm productForm={form} />\n\n      <Form context={form} onSubmit={handleSubmit}>\n        <AdminView.Section>\n          <div className=\"mb-2\">\n            <ProductNameInput required form={form} placeholder={\"Give a name to the new item ...\"} />\n          </div>\n        </AdminView.Section>\n\n        <Form.Submit value=\"Add new product\" className=\"btn btn-primary\" />\n      </Form>\n    </AdminView>\n  );\n}\n"],"sourceRoot":""}